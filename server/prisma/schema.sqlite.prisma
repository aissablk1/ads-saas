generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  email                  String                @unique
  password               String
  firstName              String?
  lastName               String?
  avatar                 String?
  role                   String                @default("USER")
  status                 String                @default("ACTIVE")
  emailVerified          Boolean               @default(false)
  twoFactorEnabled       Boolean               @default(false)
  twoFactorSecret        String?
  twoFactorBackupCodes   String                @default("[]")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  lastLogin              DateTime?
  activities           Activity[]
  campaigns            Campaign[]
  files                File[]
  subscription         Subscription?

  @@map("users")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String   @default("DRAFT")
  budget      Float
  spent       Float    @default(0)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  archived    Boolean  @default(false)
  archivedAt  DateTime?
  ads         Ad[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]

  @@map("campaigns")
}

model Ad {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  targetUrl   String?
  status      String   @default("ACTIVE")
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  ctr         Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("ads")
}

model Subscription {
  id                   String   @id @default(cuid())
  plan                 String
  status               String   @default("ACTIVE")
  startDate            DateTime @default(now())
  endDate              DateTime?
  trialEnds            DateTime?
  stripeSubscriptionId String?  @unique
  stripeCustomerId     String?
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  title       String
  description String?
  metadata    String   @default("{}")
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model File {
  id           String   @id @default(cuid())
  originalName String
  filename     String
  mimetype     String
  size         Int
  path         String
  url          String
  type         String
  category     String   @default("general")
  metadata     String   @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  campaignId   String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign     Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@map("files")
} 