const axios = require('axios');

const BASE_URL = 'http://localhost:8000';
const TEST_EMAIL = 'test@example.com';
const TEST_PASSWORD = 'test123456';

async function testBackend() {
  console.log('üß™ Test du backend ADS SaaS...\n');

  try {
    // Test 1: Health check
    console.log('1Ô∏è‚É£ Test du health check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Health check r√©ussi:', healthResponse.data);
    console.log('');

    // Test 2: API docs
    console.log('2Ô∏è‚É£ Test de la documentation API...');
    const docsResponse = await axios.get(`${BASE_URL}/api/docs`);
    console.log('‚úÖ Documentation API accessible');
    console.log('');

    // Test 3: Route de test d'authentification
    console.log('3Ô∏è‚É£ Test de la route de test d\'authentification...');
    const authTestResponse = await axios.get(`${BASE_URL}/api/auth/test`);
    console.log('‚úÖ Route de test d\'authentification:', authTestResponse.data);
    console.log('');

    // Test 4: Inscription d'un utilisateur de test
    console.log('4Ô∏è‚É£ Test d\'inscription d\'utilisateur...');
    const registerResponse = await axios.post(`${BASE_URL}/api/auth/register`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD,
      firstName: 'Test',
      lastName: 'User'
    });
    console.log('‚úÖ Inscription r√©ussie:', {
      userId: registerResponse.data.user.id,
      email: registerResponse.data.user.email,
      hasToken: !!registerResponse.data.accessToken
    });
    console.log('');

    // Test 5: Connexion avec l'utilisateur cr√©√©
    console.log('5Ô∏è‚É£ Test de connexion...');
    const loginResponse = await axios.post(`${BASE_URL}/api/auth/login`, {
      email: TEST_EMAIL,
      password: TEST_PASSWORD
    });
    console.log('‚úÖ Connexion r√©ussie:', {
      userId: loginResponse.data.user.id,
      email: loginResponse.data.user.email,
      hasToken: !!loginResponse.data.accessToken
    });
    console.log('');

    // Test 6: V√©rification du token
    console.log('6Ô∏è‚É£ Test de v√©rification du token...');
    const token = loginResponse.data.accessToken;
    const verifyResponse = await axios.get(`${BASE_URL}/api/auth/verify`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ V√©rification du token r√©ussie:', {
      valid: verifyResponse.data.valid,
      userId: verifyResponse.data.user.id
    });
    console.log('');

    // Test 7: Test d'une route prot√©g√©e
    console.log('7Ô∏è‚É£ Test d\'une route prot√©g√©e...');
    const userResponse = await axios.get(`${BASE_URL}/api/users/me`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    console.log('‚úÖ Route prot√©g√©e accessible:', {
      userId: userResponse.data.id,
      email: userResponse.data.email
    });
    console.log('');

    console.log('üéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('');
    console.log('üìã R√©sum√©:');
    console.log('   ‚úÖ Health check fonctionnel');
    console.log('   ‚úÖ Documentation API accessible');
    console.log('   ‚úÖ Authentification fonctionnelle');
    console.log('   ‚úÖ Inscription/Connexion op√©rationnelles');
    console.log('   ‚úÖ Tokens JWT valides');
    console.log('   ‚úÖ Routes prot√©g√©es accessibles');
    console.log('');
    console.log('üåê URLs d\'acc√®s:');
    console.log(`   üè• Health: ${BASE_URL}/health`);
    console.log(`   üìñ API Docs: ${BASE_URL}/api/docs`);
    console.log(`   üîê Auth Test: ${BASE_URL}/api/auth/test`);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    
    if (error.response) {
      console.error('üìä D√©tails de l\'erreur:');
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
      console.error('   URL:', error.response.config.url);
    }
    
    console.log('');
    console.log('üîß Suggestions de d√©pannage:');
    console.log('   1. V√©rifiez que le serveur est d√©marr√© sur le port 8000');
    console.log('   2. V√©rifiez les logs du serveur avec: ./run.sh logs-server');
    console.log('   3. V√©rifiez la base de donn√©es avec: ./run.sh init-database');
    console.log('   4. Red√©marrez le serveur avec: ./run.sh restart-server');
    
    process.exit(1);
  }
}

// Ex√©cuter le test
testBackend(); 