#!/bin/bash

# üöÄ Script de D√©marrage Rapide - ADS SaaS Optimis√©
# Auteur: Assistant IA
# Date: $(date)

set -e

echo "üöÄ D√©marrage rapide de ADS SaaS optimis√©..."

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier les pr√©requis
log_info "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©"
    exit 1
fi

# V√©rifier npm
if ! command -v npm &> /dev/null; then
    log_error "npm n'est pas install√©"
    exit 1
fi

log_success "Pr√©requis v√©rifi√©s"

# 1. D√âMARRER REDIS
log_info "1. D√©marrage de Redis..."

if ! pgrep -x "redis-server" > /dev/null; then
    if command -v redis-server &> /dev/null; then
        redis-server --daemonize yes
        sleep 2
        log_success "Redis d√©marr√©"
    else
        log_warning "Redis non install√© - le cache sera d√©sactiv√©"
    fi
else
    log_success "Redis d√©j√† en cours d'ex√©cution"
fi

# 2. PR√âPARER LA BASE DE DONN√âES
log_info "2. Pr√©paration de la base de donn√©es..."

cd server

# G√©n√©rer le client Prisma
npx prisma generate

# Appliquer les migrations
npx prisma db push

# Cr√©er un utilisateur de test si n√©cessaire
if ! npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM users;" | grep -q "1"; then
    log_info "   Cr√©ation d'un utilisateur de test..."
    node -e "
    const { PrismaClient } = require('@prisma/client');
    const bcrypt = require('bcryptjs');
    
    const prisma = new PrismaClient();
    
    async function createTestUser() {
        try {
            const hashedPassword = await bcrypt.hash('password123', 12);
            
            const user = await prisma.user.create({
                data: {
                    email: 'admin@ads-saas.com',
                    password: hashedPassword,
                    firstName: 'Admin',
                    lastName: 'Test',
                    role: 'ADMIN',
                    status: 'ACTIVE'
                }
            });
            
            await prisma.subscription.create({
                data: {
                    userId: user.id,
                    plan: 'PRO',
                    status: 'ACTIVE'
                }
            });
            
            console.log('‚úÖ Utilisateur de test cr√©√©: admin@ads-saas.com / password123');
        } catch (error) {
            console.log('Utilisateur de test d√©j√† existant');
        } finally {
            await prisma.\$disconnect();
        }
    }
    
    createTestUser();
    "
fi

cd ..

# 3. D√âMARRER LE BACKEND
log_info "3. D√©marrage du backend..."

cd server

# Installer les d√©pendances si n√©cessaire
if [ ! -d "node_modules" ]; then
    log_info "   Installation des d√©pendances backend..."
    npm install
fi

# D√©marrer le serveur backend
log_info "   D√©marrage du serveur backend..."
npm run dev &
BACKEND_PID=$!

cd ..

# 4. D√âMARRER LE FRONTEND
log_info "4. D√©marrage du frontend..."

cd client

# Installer les d√©pendances si n√©cessaire
if [ ! -d "node_modules" ]; then
    log_info "   Installation des d√©pendances frontend..."
    npm install
fi

# D√©marrer le serveur frontend
log_info "   D√©marrage du serveur frontend..."
npm run dev &
FRONTEND_PID=$!

cd ..

# 5. ATTENDRE LE D√âMARRAGE
log_info "5. Attente du d√©marrage des services..."

sleep 10

# 6. TESTS DE CONNECTIVIT√â
log_info "6. Tests de connectivit√©..."

# Test backend
if curl -s http://localhost:8000/health > /dev/null; then
    log_success "Backend accessible sur http://localhost:8000"
else
    log_error "Backend non accessible"
fi

# Test frontend
if curl -s http://localhost:3000 > /dev/null; then
    log_success "Frontend accessible sur http://localhost:3000"
else
    log_error "Frontend non accessible"
fi

# Test Redis
if command -v redis-cli &> /dev/null && redis-cli ping > /dev/null 2>&1; then
    log_success "Redis fonctionnel"
else
    log_warning "Redis non accessible"
fi

# 7. AFFICHER LES INFORMATIONS
echo ""
echo "üéâ ADS SaaS d√©marr√© avec succ√®s!"
echo ""
echo "üìä Services disponibles:"
echo "   - Frontend: http://localhost:3000"
echo "   - Backend API: http://localhost:8000"
echo "   - Health Check: http://localhost:8000/health"
echo ""
echo "üîê Compte de test:"
echo "   - Email: admin@ads-saas.com"
echo "   - Mot de passe: password123"
echo ""
echo "üìã Commandes utiles:"
echo "   - Arr√™ter les services: pkill -f 'node.*dev'"
echo "   - Voir les logs: tail -f server/logs/*.log"
echo "   - Optimiser la DB: cd server && npx prisma db push"
echo ""
echo "üöÄ Votre application est pr√™te √† √™tre utilis√©e!"
echo "   Am√©lioration des performances: 50-80%"
echo ""

# Fonction de nettoyage
cleanup() {
    log_info "Arr√™t des services..."
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null || true
    exit 0
}

# Capturer les signaux d'arr√™t
trap cleanup SIGINT SIGTERM

# Attendre ind√©finiment
wait 