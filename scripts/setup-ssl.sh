#!/bin/bash

# =============================================================================
# SCRIPT DE CONFIGURATION SSL - SaaS ADS (SANS DOCKER)
# =============================================================================

set -e

echo "üîí Configuration SSL pour ADS SaaS (mode local)..."

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# V√©rification des pr√©requis
log "V√©rification des pr√©requis SSL..."

if ! command -v openssl &> /dev/null; then
    error "OpenSSL n'est pas install√©"
    echo "Installez OpenSSL avec: brew install openssl (macOS) ou apt-get install openssl (Linux)"
    exit 1
fi

log "OpenSSL d√©tect√©: $(openssl version)"

# Cr√©er les r√©pertoires SSL
log "Cr√©ation des r√©pertoires SSL..."
mkdir -p ssl/certs
mkdir -p ssl/private
mkdir -p ssl/csr

# G√©n√©ration des certificats SSL auto-sign√©s
log "G√©n√©ration des certificats SSL auto-sign√©s..."

# G√©n√©rer la cl√© priv√©e
info "G√©n√©ration de la cl√© priv√©e..."
openssl genrsa -out ssl/private/localhost.key 2048

# G√©n√©rer le certificat auto-sign√©
info "G√©n√©ration du certificat auto-sign√©..."
openssl req -x509 -new -nodes \
    -key ssl/private/localhost.key \
    -sha256 -days 365 \
    -out ssl/certs/localhost.crt \
    -subj "/C=FR/ST=France/L=Paris/O=ADS SaaS/CN=localhost" \
    -extensions v3_req \
    -config <(cat << EOF
[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no

[req_distinguished_name]
C = FR
ST = France
L = Paris
O = ADS SaaS
CN = localhost

[v3_req]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = localhost
DNS.2 = *.localhost
IP.1 = 127.0.0.1
EOF
)

# Cr√©er un bundle de certificats
info "Cr√©ation du bundle de certificats..."
cat ssl/certs/localhost.crt ssl/private/localhost.key > ssl/localhost.pem

# D√©finir les permissions appropri√©es
chmod 600 ssl/private/localhost.key
chmod 644 ssl/certs/localhost.crt
chmod 600 ssl/localhost.pem

log "‚úÖ Certificats SSL g√©n√©r√©s"

# Configuration du serveur HTTPS local
log "Configuration du serveur HTTPS local..."

# Cr√©er un script de serveur HTTPS simple
cat > ssl/https-server.js << 'EOF'
const https = require('https');
const fs = require('fs');
const path = require('path');

const options = {
  key: fs.readFileSync(path.join(__dirname, 'private/localhost.key')),
  cert: fs.readFileSync(path.join(__dirname, 'certs/localhost.crt'))
};

const server = https.createServer(options, (req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/html' });
  res.end(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>ADS SaaS - HTTPS Test</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .success { color: #27ae60; font-weight: bold; }
            .info { background: #3498db; color: white; padding: 15px; border-radius: 4px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîí ADS SaaS - Test HTTPS</h1>
            <div class="success">‚úÖ Connexion HTTPS s√©curis√©e r√©ussie !</div>
            <div class="info">
                <strong>Informations SSL :</strong><br>
                Certificat : Auto-sign√©<br>
                Validit√© : 365 jours<br>
                Domaine : localhost<br>
                Port : 8443
            </div>
            <p>Cette page confirme que votre configuration SSL fonctionne correctement.</p>
            <p><strong>Prochaine √©tape :</strong> Configurez votre application pour utiliser HTTPS.</p>
        </div>
    </body>
    </html>
  `);
});

const PORT = 8443;
server.listen(PORT, () => {
  console.log(`üîí Serveur HTTPS d√©marr√© sur https://localhost:${PORT}`);
  console.log(`üìã Certificat: ${path.join(__dirname, 'certs/localhost.crt')}`);
  console.log(`üîë Cl√© priv√©e: ${path.join(__dirname, 'private/localhost.key')}`);
});
EOF

# Cr√©er un script de test SSL
cat > ssl/test-ssl.sh << 'EOF'
#!/bin/bash

echo "üß™ Test de la configuration SSL..."

# V√©rifier les fichiers SSL
if [ -f "ssl/certs/localhost.crt" ]; then
    echo "‚úÖ Certificat SSL pr√©sent"
else
    echo "‚ùå Certificat SSL manquant"
    exit 1
fi

if [ -f "ssl/private/localhost.key" ]; then
    echo "‚úÖ Cl√© priv√©e SSL pr√©sente"
else
    echo "‚ùå Cl√© priv√©e SSL manquante"
    exit 1
fi

# V√©rifier la validit√© du certificat
echo "üìã Informations du certificat:"
openssl x509 -in ssl/certs/localhost.crt -text -noout | grep -E "(Subject:|Not Before|Not After|DNS:|IP Address:)"

# Tester la connexion HTTPS
echo ""
echo "üîí Test de connexion HTTPS..."
if curl -k -s https://localhost:8443 > /dev/null; then
    echo "‚úÖ Serveur HTTPS accessible"
else
    echo "‚ö†Ô∏è  Serveur HTTPS non accessible (normal si pas d√©marr√©)"
fi

echo ""
echo "üìä R√©sum√© SSL:"
echo "  - Certificat: ssl/certs/localhost.crt"
echo "  - Cl√© priv√©e: ssl/private/localhost.key"
echo "  - Bundle: ssl/localhost.pem"
echo "  - Test serveur: node ssl/https-server.js"
echo "  - Test URL: https://localhost:8443"
EOF

chmod +x ssl/test-ssl.sh

# Cr√©er un script de d√©marrage du serveur HTTPS
cat > ssl/start-https-server.sh << 'EOF'
#!/bin/bash

echo "üöÄ D√©marrage du serveur HTTPS de test..."

# V√©rifier que les certificats existent
if [ ! -f "ssl/certs/localhost.crt" ] || [ ! -f "ssl/private/localhost.key" ]; then
    echo "‚ùå Certificats SSL manquants. Ex√©cutez d'abord: ./scripts/setup-ssl.sh"
    exit 1
fi

# D√©marrer le serveur HTTPS
cd ssl
node https-server.js
EOF

chmod +x ssl/start-https-server.sh

# Configuration pour l'application
log "Configuration SSL pour l'application..."

# Cr√©er un fichier de configuration SSL pour l'application
cat > ssl/ssl-config.js << 'EOF'
// Configuration SSL pour ADS SaaS
const fs = require('fs');
const path = require('path');

const sslConfig = {
  key: fs.readFileSync(path.join(__dirname, 'private/localhost.key')),
  cert: fs.readFileSync(path.join(__dirname, 'certs/localhost.crt')),
  ca: fs.readFileSync(path.join(__dirname, 'certs/localhost.crt')) // Auto-sign√©
};

module.exports = sslConfig;
EOF

# Cr√©er un script d'installation des certificats syst√®me
cat > ssl/install-cert-system.sh << 'EOF'
#!/bin/bash

echo "üîß Installation du certificat dans le syst√®me..."

# macOS
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üì± Installation pour macOS..."
    sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ssl/certs/localhost.crt
    echo "‚úÖ Certificat install√© dans le trousseau syst√®me macOS"
    
# Linux
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "üêß Installation pour Linux..."
    sudo cp ssl/certs/localhost.crt /usr/local/share/ca-certificates/
    sudo update-ca-certificates
    echo "‚úÖ Certificat install√© dans le syst√®me Linux"
    
# Windows
elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
    echo "ü™ü Installation pour Windows..."
    echo "‚ö†Ô∏è  Installation manuelle requise pour Windows"
    echo "  1. Double-cliquez sur ssl/certs/localhost.crt"
    echo "  2. Cliquez sur 'Installer le certificat'"
    echo "  3. Choisissez 'Ordinateur local'"
    echo "  4. S√©lectionnez 'Placer tous les certificats dans le magasin suivant'"
    echo "  5. Cliquez sur 'Parcourir' et s√©lectionnez 'Autorit√©s de certification racines de confiance'"
    echo "  6. Cliquez sur 'Suivant' puis 'Terminer'"
else
    echo "‚ö†Ô∏è  Syst√®me d'exploitation non reconnu"
    echo "   Installation manuelle du certificat requise"
fi

echo ""
echo "üîó Apr√®s installation, vous pourrez acc√©der √†:"
echo "  - https://localhost:8443 (serveur de test)"
echo "  - https://localhost:3000 (application, si configur√©e)"
echo "  - https://localhost:8000 (API, si configur√©e)"
EOF

chmod +x ssl/install-cert-system.sh

# Test de la configuration
log "Test de la configuration SSL..."
./ssl/test-ssl.sh

log "‚úÖ Configuration SSL termin√©e avec succ√®s !"
echo
echo "üîó Fichiers SSL cr√©√©s:"
echo "  - Certificat: ssl/certs/localhost.crt"
echo "  - Cl√© priv√©e: ssl/private/localhost.key"
echo "  - Bundle: ssl/localhost.pem"
echo "  - Configuration: ssl/ssl-config.js"
echo
echo "üöÄ Commandes disponibles:"
echo "  - Test SSL: ./ssl/test-ssl.sh"
echo "  - Serveur de test: ./ssl/start-https-server.sh"
echo "  - Installer certificat: ./ssl/install-cert-system.sh"
echo
echo "üîí URLs de test:"
echo "  - Serveur HTTPS: https://localhost:8443"
echo "  - Application: https://localhost:3000 (apr√®s configuration)"
echo "  - API: https://localhost:8000 (apr√®s configuration)"
echo
echo "‚ö†Ô∏è  Note: Les certificats sont auto-sign√©s. Pour la production, utilisez Let's Encrypt ou un CA commercial."
echo
log "SSL configur√© et pr√™t √† l'emploi !" 