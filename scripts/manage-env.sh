#!/bin/bash

# ========================================
# Gestionnaire de Variables d'Environnement ADS SaaS
# ========================================

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonctions utilitaires
error() {
    echo -e "${RED}‚ùå Erreur: $1${NC}" >&2
    exit 1
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# V√©rifier que nous sommes √† la racine du projet
if [ ! -f ".env.example" ]; then
    error "Ce script doit √™tre ex√©cut√© depuis la racine du projet ADS"
fi

# Fonction pour afficher le menu principal
show_menu() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë           Gestionnaire de Variables d'Environnement       ‚ïë"
    echo "‚ïë                    ADS SaaS                               ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo "üìã Que voulez-vous faire ?"
    echo "1) üîß Cr√©er/Configurer le fichier .env"
    echo "2) üìù √âditer le fichier .env"
    echo "3) üëÄ Afficher le contenu du fichier .env"
    echo "4) üîç V√©rifier la configuration"
    echo "5) üîç V√©rifier la configuration des applications"
    echo "6) üìã Afficher toutes les variables disponibles"
    echo "7) üß™ Tester la configuration"
    echo "8) üö™ Quitter"
    echo
}

# Fonction pour cr√©er/configurer le fichier .env
setup_env() {
    info "Configuration du fichier .env..."
    
    if [ -f ".env" ]; then
        warning "Le fichier .env existe d√©j√†"
        read -p "Voulez-vous le sauvegarder et cr√©er un nouveau ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
            success "Sauvegarde cr√©√©e"
        else
            info "Configuration annul√©e"
            return
        fi
    fi
    
    cp .env.example .env
    success "Fichier .env cr√©√© √† partir de .env.example"
    
    warning "N'oubliez pas de modifier le fichier .env avec vos vraies valeurs !"
    echo "Variables importantes √† configurer :"
    echo "  - JWT_SECRET (cl√© secr√®te pour les tokens JWT)"
    echo "  - DATABASE_URL (URL de votre base de donn√©es)"
    echo "  - STRIPE_SECRET_KEY (si vous utilisez Stripe)"
    echo "  - SMTP_* (si vous utilisez l'envoi d'emails)"
}

# Fonction pour √©diter le fichier .env
edit_env() {
    if [ ! -f ".env" ]; then
        error "Le fichier .env n'existe pas. Utilisez l'option 1 pour le cr√©er."
    fi
    
    info "Ouverture du fichier .env dans l'√©diteur..."
    
    # D√©tecter l'√©diteur pr√©f√©r√©
    if command -v code &> /dev/null; then
        code .env
    elif command -v nano &> /dev/null; then
        nano .env
    elif command -v vim &> /dev/null; then
        vim .env
    else
        error "Aucun √©diteur de texte trouv√©. Ouvrez manuellement le fichier .env"
    fi
}

# Fonction pour afficher le contenu du fichier .env
show_env() {
    if [ ! -f ".env" ]; then
        error "Le fichier .env n'existe pas"
    fi
    
    echo -e "${CYAN}Contenu du fichier .env :${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    cat .env
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Fonction pour v√©rifier la configuration
check_config() {
    info "V√©rification de la configuration..."
    
    # V√©rifier l'existence des fichiers
    if [ ! -f ".env" ]; then
        error "Fichier .env manquant"
    fi
    
    # V√©rifier que les applications sont configur√©es pour utiliser le fichier .env √† la racine
    if grep -q "dotenv.*config.*path.*\.\./\.env" server/src/index.js; then
        success "Serveur configur√© pour utiliser .env √† la racine"
    else
        warning "Serveur non configur√© pour utiliser .env √† la racine"
    fi
    
    if grep -q "dotenv.*config.*path.*\.\./\.env" client/next.config.js; then
        success "Client configur√© pour utiliser .env √† la racine"
    else
        warning "Client non configur√© pour utiliser .env √† la racine"
    fi
    
    # V√©rifier les variables importantes
    source .env 2>/dev/null || warning "Impossible de charger le fichier .env"
    
    if [ -z "$JWT_SECRET" ]; then
        warning "JWT_SECRET non d√©fini"
    else
        success "JWT_SECRET d√©fini"
    fi
    
    if [ -z "$DATABASE_URL" ]; then
        warning "DATABASE_URL non d√©fini"
    else
        success "DATABASE_URL d√©fini"
    fi
    
    if [ -z "$PORT" ]; then
        warning "PORT non d√©fini"
    else
        success "PORT d√©fini: $PORT"
    fi
    
    success "V√©rification termin√©e"
}

# Fonction pour v√©rifier la configuration des applications
check_app_config() {
    info "V√©rification de la configuration des applications..."
    
    # V√©rifier le serveur
    if grep -q "dotenv.*config.*path.*\.\./\.env" server/src/index.js; then
        success "Serveur configur√© pour utiliser .env √† la racine"
    else
        warning "Serveur non configur√© pour utiliser .env √† la racine"
        echo "Ajoutez: require('dotenv').config({ path: '../.env' }); au d√©but de server/src/index.js"
    fi
    
    # V√©rifier le client
    if grep -q "dotenv.*config.*path.*\.\./\.env" client/next.config.js; then
        success "Client configur√© pour utiliser .env √† la racine"
    else
        warning "Client non configur√© pour utiliser .env √† la racine"
        echo "Ajoutez: require('dotenv').config({ path: '../.env' }); au d√©but de client/next.config.js"
    fi
    
    success "V√©rification termin√©e"
}

# Fonction pour afficher toutes les variables disponibles
show_variables() {
    echo -e "${CYAN}Variables d'environnement disponibles :${NC}"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üîß Configuration g√©n√©rale :"
    echo "  NODE_ENV              - Environnement (development/production)"
    echo "  PORT                  - Port du serveur backend"
    echo
    echo "üóÑÔ∏è  Base de donn√©es :"
    echo "  DATABASE_URL          - URL de connexion √† la base de donn√©es"
    echo
    echo "üîê Authentification :"
    echo "  JWT_SECRET            - Cl√© secr√®te pour les tokens JWT"
    echo "  JWT_REFRESH_SECRET    - Cl√© secr√®te pour les refresh tokens"
    echo "  JWT_EXPIRES_IN        - Dur√©e de validit√© des tokens"
    echo "  NEXTAUTH_SECRET       - Cl√© secr√®te pour NextAuth.js"
    echo
    echo "üåê URLs :"
    echo "  FRONTEND_URL          - URL du frontend"
    echo "  NEXT_PUBLIC_API_URL   - URL de l'API (public)"
    echo "  NEXTAUTH_URL          - URL pour NextAuth.js"
    echo
    echo "üí≥ Stripe (optionnel) :"
    echo "  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY - Cl√© publique Stripe"
    echo "  STRIPE_SECRET_KEY     - Cl√© secr√®te Stripe"
    echo "  STRIPE_WEBHOOK_SECRET - Secret webhook Stripe"
    echo
    echo "üìß Email (optionnel) :"
    echo "  SMTP_HOST             - Serveur SMTP"
    echo "  SMTP_PORT             - Port SMTP"
    echo "  SMTP_USER             - Utilisateur SMTP"
    echo "  SMTP_PASS             - Mot de passe SMTP"
    echo
    echo "üåç Traduction (optionnel) :"
    echo "  GOOGLE_TRANSLATE_API_KEY - Cl√© API Google Translate"
    echo "  LIBRETRANSLATE_URL    - URL LibreTranslate"
    echo "  LIBRETRANSLATE_API_KEY - Cl√© API LibreTranslate"
    echo
    echo "üîí CORS :"
    echo "  CORS_ORIGIN           - Origine autoris√©e pour CORS"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
}

# Fonction pour tester la configuration
test_config() {
    info "Test de la configuration..."
    
    if [ ! -f ".env" ]; then
        error "Fichier .env manquant"
    fi
    
    # Charger les variables
    source .env 2>/dev/null || error "Erreur lors du chargement du fichier .env"
    
    # Tests basiques
    echo "üîç Tests de configuration :"
    
    if [ "$NODE_ENV" = "development" ] || [ "$NODE_ENV" = "production" ]; then
        success "NODE_ENV: $NODE_ENV"
    else
        warning "NODE_ENV: $NODE_ENV (devrait √™tre 'development' ou 'production')"
    fi
    
    if [[ "$PORT" =~ ^[0-9]+$ ]] && [ "$PORT" -gt 0 ] && [ "$PORT" -lt 65536 ]; then
        success "PORT: $PORT"
    else
        warning "PORT: $PORT (devrait √™tre un nombre entre 1 et 65535)"
    fi
    
    if [ -n "$JWT_SECRET" ]; then
        if [ ${#JWT_SECRET} -ge 32 ]; then
            success "JWT_SECRET: OK (${#JWT_SECRET} caract√®res)"
        else
            warning "JWT_SECRET: Trop court (${#JWT_SECRET} caract√®res, minimum 32)"
        fi
    else
        warning "JWT_SECRET: Non d√©fini"
    fi
    
    if [ -n "$DATABASE_URL" ]; then
        success "DATABASE_URL: D√©fini"
    else
        warning "DATABASE_URL: Non d√©fini"
    fi
    
    success "Tests termin√©s"
}

# Boucle principale
while true; do
    show_menu
    read -p "Votre choix (1-8): " -n 1 -r
    echo
    echo
    
    case $REPLY in
        1)
            setup_env
            ;;
        2)
            edit_env
            ;;
        3)
            show_env
            ;;
        4)
            check_config
            ;;
        5)
            check_app_config
            ;;
        6)
            show_variables
            ;;
        7)
            test_config
            ;;
        8)
            info "Au revoir !"
            exit 0
            ;;
        *)
            error "Choix invalide. Veuillez choisir un nombre entre 1 et 8."
            ;;
    esac
    
    echo
    read -p "Appuyez sur Entr√©e pour continuer..."
    echo
done 