name: 🔍 Debug Secrets Configuration

# Workflow temporaire pour diagnostiquer les problèmes de secrets
# À supprimer une fois les environnements configurés correctement

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement à tester'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  debug-secrets-staging:
    name: 🔍 Debug Staging Secrets
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'staging' }}
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Debug Environment Context
      run: |
        echo "=== ENVIRONMENT DEBUG ==="
        echo "Selected environment: staging"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub actor: ${{ github.actor }}"
        echo "GitHub repository: ${{ github.repository }}"
        echo
        
    - name: 🔍 Check Required Secrets (Staging)
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST || '' }}
        STAGING_USER: ${{ secrets.STAGING_USER || '' }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY || '' }}
        STAGING_PORT: ${{ secrets.STAGING_PORT || '' }}
        STAGING_ENV: ${{ secrets.STAGING_ENV || '' }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
      run: |
        echo "=== STAGING SECRETS CHECK ==="
        echo "STAGING_HOST defined: $([ -n "$STAGING_HOST" ] && echo 'true' || echo 'false')"
        echo "STAGING_USER defined: $([ -n "$STAGING_USER" ] && echo 'true' || echo 'false')"
        echo "STAGING_SSH_KEY defined: $([ -n "$STAGING_SSH_KEY" ] && echo 'true' || echo 'false')"
        echo "STAGING_PORT defined: $([ -n "$STAGING_PORT" ] && echo 'true' || echo 'false')"
        echo "STAGING_ENV defined: $([ -n "$STAGING_ENV" ] && echo 'true' || echo 'false')"
        echo
        echo "Optional secrets:"
        echo "SLACK_WEBHOOK defined: $([ -n "$SLACK_WEBHOOK" ] && echo 'true' || echo 'false')"
        echo
        
    - name: 🔍 Check Repository-level Secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || '' }}
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN || '' }}
      run: |
        echo "=== REPOSITORY SECRETS CHECK ==="
        echo "GITHUB_TOKEN defined: $([ -n "$GITHUB_TOKEN" ] && echo 'true' || echo 'false')"
        echo "CODECOV_TOKEN defined: $([ -n "$CODECOV_TOKEN" ] && echo 'true' || echo 'false')"
        echo
        
    - name: 🔍 Test SSH Connection (Staging)
      env:
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY || '' }}
        STAGING_HOST: ${{ secrets.STAGING_HOST || '' }}
        STAGING_USER: ${{ secrets.STAGING_USER || '' }}
      run: |
        echo "=== STAGING SSH TEST ==="
        # Test SSH key format (without exposing content)
        if [ -n "$STAGING_SSH_KEY" ]; then
          echo "SSH Key format check:"
          echo "$STAGING_SSH_KEY" | head -1 | grep -q "BEGIN" && echo "✅ SSH key has valid header" || echo "❌ SSH key header invalid"
          echo "$STAGING_SSH_KEY" | tail -1 | grep -q "END" && echo "✅ SSH key has valid footer" || echo "❌ SSH key footer invalid"
        else
          echo "❌ SSH key is empty"
        fi
        
        # Test connection (timeout after 10 seconds)
        if [ -n "$STAGING_HOST" ] && [ -n "$STAGING_USER" ]; then
          timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o BatchMode=yes \
            "$STAGING_USER@$STAGING_HOST" \
            "echo 'SSH connection successful'" || echo "SSH connection failed (expected if key not configured properly)"
        else
          echo "❌ Missing STAGING_HOST or STAGING_USER"
        fi
      continue-on-error: true

  debug-secrets-production:
    name: 🔍 Debug Production Secrets
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'production' }}
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Debug Environment Context
      run: |
        echo "=== ENVIRONMENT DEBUG ==="
        echo "Selected environment: production"
        echo "GitHub ref: ${{ github.ref }}"
        echo "GitHub actor: ${{ github.actor }}"
        echo "GitHub repository: ${{ github.repository }}"
        echo
        
    - name: 🔍 Check Required Secrets (Production)
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST || '' }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER || '' }}
        PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY || '' }}
        PRODUCTION_PORT: ${{ secrets.PRODUCTION_PORT || '' }}
        PRODUCTION_ENV: ${{ secrets.PRODUCTION_ENV || '' }}
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK || '' }}
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK || '' }}
        METRICS_API_KEY: ${{ secrets.METRICS_API_KEY || '' }}
      run: |
        echo "=== PRODUCTION SECRETS CHECK ==="
        echo "PRODUCTION_HOST defined: $([ -n "$PRODUCTION_HOST" ] && echo 'true' || echo 'false')"
        echo "PRODUCTION_USER defined: $([ -n "$PRODUCTION_USER" ] && echo 'true' || echo 'false')"
        echo "PRODUCTION_SSH_KEY defined: $([ -n "$PRODUCTION_SSH_KEY" ] && echo 'true' || echo 'false')"
        echo "PRODUCTION_PORT defined: $([ -n "$PRODUCTION_PORT" ] && echo 'true' || echo 'false')"
        echo "PRODUCTION_ENV defined: $([ -n "$PRODUCTION_ENV" ] && echo 'true' || echo 'false')"
        echo
        echo "Optional secrets:"
        echo "SLACK_WEBHOOK defined: $([ -n "$SLACK_WEBHOOK" ] && echo 'true' || echo 'false')"
        echo "DISCORD_WEBHOOK defined: $([ -n "$DISCORD_WEBHOOK" ] && echo 'true' || echo 'false')"
        echo "METRICS_API_KEY defined: $([ -n "$METRICS_API_KEY" ] && echo 'true' || echo 'false')"
        echo
        
    - name: 🔍 Check Repository-level Secrets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || '' }}
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN || '' }}
      run: |
        echo "=== REPOSITORY SECRETS CHECK ==="
        echo "GITHUB_TOKEN defined: $([ -n "$GITHUB_TOKEN" ] && echo 'true' || echo 'false')"
        echo "CODECOV_TOKEN defined: $([ -n "$CODECOV_TOKEN" ] && echo 'true' || echo 'false')"
        echo
        
    - name: 🔍 Test SSH Connection (Production)
      env:
        PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY || '' }}
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST || '' }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER || '' }}
      run: |
        echo "=== PRODUCTION SSH TEST ==="
        # Test SSH key format (without exposing content)
        if [ -n "$PRODUCTION_SSH_KEY" ]; then
          echo "SSH Key format check:"
          echo "$PRODUCTION_SSH_KEY" | head -1 | grep -q "BEGIN" && echo "✅ SSH key has valid header" || echo "❌ SSH key header invalid"
          echo "$PRODUCTION_SSH_KEY" | tail -1 | grep -q "END" && echo "✅ SSH key has valid footer" || echo "❌ SSH key footer invalid"
        else
          echo "❌ SSH key is empty"
        fi
        
        # Test connection (timeout after 10 seconds)
        if [ -n "$PRODUCTION_HOST" ] && [ -n "$PRODUCTION_USER" ]; then
          timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o BatchMode=yes \
            "$PRODUCTION_USER@$PRODUCTION_HOST" \
            "echo 'SSH connection successful'" || echo "SSH connection failed (expected if key not configured properly)"
        else
          echo "❌ Missing PRODUCTION_HOST or PRODUCTION_USER"
        fi
      continue-on-error: true
      
  generate-report:
    name: 📊 Generate Debug Report
    runs-on: ubuntu-latest
    needs: [debug-secrets-staging, debug-secrets-production]
    if: always()
    
    steps:
    - name: 📊 Generate Debug Report
      run: |
        echo "## 🔍 Debug Report - ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY
        echo "### Environment Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the step logs above for missing secrets" >> $GITHUB_STEP_SUMMARY
        echo "2. Follow the [Environment Setup Guide](.github/ENVIRONMENT_SETUP.md)" >> $GITHUB_STEP_SUMMARY
        echo "3. Configure missing secrets in Settings → Environments" >> $GITHUB_STEP_SUMMARY
        echo "4. Re-run this debug workflow to verify" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY
        echo "### Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- [Secrets Configuration](.github/SECRETS.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Environment Setup](.github/ENVIRONMENT_SETUP.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Workflow README](.github/README.md)" >> $GITHUB_STEP_SUMMARY 