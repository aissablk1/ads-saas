#!/bin/bash

# Script de gestion ADS SaaS
# Auteur: A√Øssa BELKOUSSA
# Description: Interface interactive pour g√©rer l'application ADS SaaS

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Helpers mutualis√©s pour tous les scripts
log() { echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
info() { echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
warn() { echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }
error() { echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"; }

# Variables
SERVER_PORT=8000
CLIENT_PORT=3000
PROJECT_DIR=$(pwd)

# Variables pour les processus en arri√®re-plan
SERVER_PID=""
CLIENT_PID=""

# Variables pour les processus en arri√®re-plan
SERVER_PID=""
CLIENT_PID=""

# Fonction pour d√©tecter automatiquement tous les scripts dans le dossier scripts/
detect_scripts() {
    local scripts_dir="scripts"
    local detected_scripts=()
    local script_options=()
    local script_functions=()
    local menu_options=()
    local case_options=()
    
    if [ ! -d "$scripts_dir" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Dossier $scripts_dir non trouv√©${NC}"
        return
    fi
    
    echo -e "${BLUE}üîç D√©tection automatique des scripts dans $scripts_dir/...${NC}"
    
    # Parcourir tous les fichiers dans le dossier scripts
    while IFS= read -r -d '' file; do
        local filename=$(basename "$file")
        local name_without_ext="${filename%.*}"
        local extension="${filename##*.}"
        
        # Ignorer les fichiers non-ex√©cutables et les fichiers temporaires
        if [[ "$filename" == *".backup"* ]] || [[ "$filename" == *".tmp"* ]] || [[ "$filename" == *".old"* ]]; then
            continue
        fi
        
        # V√©rifier si le fichier est ex√©cutable ou a une extension de script
        if [[ -x "$file" ]] || [[ "$extension" =~ ^(sh|js|py|pl|rb|php)$ ]]; then
            detected_scripts+=("$file")
            
            # Cr√©er un nom de fonction bas√© sur le nom du fichier
            local function_name=$(echo "$name_without_ext" | sed 's/[^a-zA-Z0-9]/_/g' | tr '[:upper:]' '[:lower:]')
            
            # Ajouter aux diff√©rentes listes
            script_options+=("$name_without_ext")
            script_functions+=("$function_name")
            
            # Cr√©er l'option de menu (num√©ro automatique)
            local menu_number=$((100 + ${#menu_options[@]}))
            menu_options+=("$menu_number")
            
            # Cr√©er l'option de case
            case_options+=("$name_without_ext")
            
            echo -e "${GREEN}‚úÖ Script d√©tect√©: $filename -> $function_name${NC}"
        fi
    done < <(find "$scripts_dir" -maxdepth 1 -type f -print0 2>/dev/null)
    
    # Sauvegarder les r√©sultats dans des variables globales
    DETECTED_SCRIPTS=("${detected_scripts[@]}")
    SCRIPT_OPTIONS=("${script_options[@]}")
    SCRIPT_FUNCTIONS=("${script_functions[@]}")
    MENU_OPTIONS=("${menu_options[@]}")
    CASE_OPTIONS=("${case_options[@]}")
    
    echo -e "${GREEN}üéØ Total: ${#detected_scripts[@]} scripts d√©tect√©s${NC}"
}

# Fonction pour ex√©cuter un script d√©tect√©
execute_detected_script() {
    local script_name="$1"
    local scripts_dir="scripts"
    local script_path="$scripts_dir/$script_name"
    
    # Chercher le script avec diff√©rentes extensions
    local found_script=""
    for ext in "" ".sh" ".js" ".py" ".pl" ".rb" ".php"; do
        if [ -f "$script_path$ext" ]; then
            found_script="$script_path$ext"
            break
        fi
    done
    
    if [ -z "$found_script" ]; then
        echo -e "${RED}‚ùå Script $script_name non trouv√© dans $scripts_dir/${NC}"
        return 1
    fi
    
    echo -e "${GREEN}üöÄ Ex√©cution du script: $found_script${NC}"
    
    # D√©terminer le type de script et l'ex√©cuter
    local extension="${found_script##*.}"
    case "$extension" in
        "sh")
            if [ -x "$found_script" ]; then
                bash "$found_script"
            else
                chmod +x "$found_script" && bash "$found_script"
            fi
            ;;
        "js")
            node "$found_script"
            ;;
        "py")
            python3 "$found_script"
            ;;
        "pl")
            perl "$found_script"
            ;;
        "rb")
            ruby "$found_script"
            ;;
        "php")
            php "$found_script"
            ;;
        *)
            # Essayer d'ex√©cuter directement
            if [ -x "$found_script" ]; then
                "$found_script"
            else
                chmod +x "$found_script" && "$found_script"
            fi
            ;;
    esac
    
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Script $script_name ex√©cut√© avec succ√®s${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de l'ex√©cution du script $script_name (code: $exit_code)${NC}"
    fi
    
    return $exit_code
}

# Fonction pour afficher le menu des scripts d√©tect√©s
show_detected_scripts_menu() {
    if [ ${#DETECTED_SCRIPTS[@]} -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun script d√©tect√© dans le dossier scripts/${NC}"
        return
    fi
    
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Scripts D√©tect√©s Automatiquement ‚îÅ‚îÅ‚îÅ${NC}"
    for i in "${!SCRIPT_OPTIONS[@]}"; do
        local menu_number="${MENU_OPTIONS[$i]}"
        local script_name="${SCRIPT_OPTIONS[$i]}"
        local script_path="${DETECTED_SCRIPTS[$i]}"
        local filename=$(basename "$script_path")
        
        echo -e "${GREEN}$menu_number)${NC} üöÄ $script_name ($filename)"
    done
    echo
}

# Fonction pour g√©rer les options de menu des scripts d√©tect√©s
handle_detected_script_choice() {
    local choice="$1"
    
    # V√©rifier si c'est une option de script d√©tect√©
    for i in "${!MENU_OPTIONS[@]}"; do
        if [ "$choice" = "${MENU_OPTIONS[$i]}" ]; then
            local script_name="${SCRIPT_OPTIONS[$i]}"
            echo -e "${CYAN}üéØ Ex√©cution du script d√©tect√©: $script_name${NC}"
            execute_detected_script "$script_name"
            return 0
        fi
    done
    
    return 1
}

# Fonction pour afficher des informations d√©taill√©es sur un script
show_script_info() {
    local script_name="$1"
    local scripts_dir="scripts"
    local script_path="$scripts_dir/$script_name"
    
    # Chercher le script avec diff√©rentes extensions
    local found_script=""
    for ext in "" ".sh" ".js" ".py" ".pl" ".rb" ".php"; do
        if [ -f "$script_path$ext" ]; then
            found_script="$script_path$ext"
            break
        fi
    done
    
    if [ -z "$found_script" ]; then
        echo -e "${RED}‚ùå Script $script_name non trouv√©${NC}"
        return 1
    fi
    
    echo -e "${CYAN}üìã Informations sur le script: $script_name${NC}"
    echo -e "${BLUE}üìÅ Chemin: $found_script${NC}"
    echo -e "${BLUE}üìè Taille: $(du -h "$found_script" | cut -f1)${NC}"
    echo -e "${BLUE}üìÖ Modifi√©: $(stat -f "%Sm" "$found_script" 2>/dev/null || stat -c "%y" "$found_script" 2>/dev/null)${NC}"
    
    # V√©rifier les permissions
    if [ -x "$found_script" ]; then
        echo -e "${GREEN}‚úÖ Ex√©cutable${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Non ex√©cutable${NC}"
    fi
    
    # Afficher les premi√®res lignes du script (commentaires)
    echo -e "${BLUE}üìù Description:${NC}"
    head -10 "$found_script" | grep -E "^#|^//|^<!--" | head -5 | sed 's/^/  /'
    
    echo
}

# Fonction pour tuer un processus sur un port donn√© (int√©gr√©e de stop.sh et start.sh)
kill_port() {
    local port=$1
    local pid=$(lsof -ti:$port 2>/dev/null)
    if [ ! -z "$pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t du processus sur le port $port (PID: $pid)...${NC}"
        kill -9 $pid 2>/dev/null || true
        sleep 1
        echo -e "${GREEN}‚úÖ Port $port lib√©r√©${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  Aucun processus trouv√© sur le port $port${NC}"
    fi
}

# Fonction am√©lior√©e pour forcer la lib√©ration des ports
force_kill_ports() {
    echo -e "${YELLOW}üîß Lib√©ration forc√©e des ports...${NC}"
    
    # Lib√©rer le port serveur
    local server_pid=$(lsof -ti:$SERVER_PORT 2>/dev/null)
    if [ ! -z "$server_pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t forc√© du processus serveur sur le port $SERVER_PORT (PID: $server_pid)...${NC}"
        kill -9 $server_pid 2>/dev/null || true
        sleep 2
    fi
    
    # Lib√©rer le port client
    local client_pid=$(lsof -ti:$CLIENT_PORT 2>/dev/null)
    if [ ! -z "$client_pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t forc√© du processus client sur le port $CLIENT_PORT (PID: $client_pid)...${NC}"
        kill -9 $client_pid 2>/dev/null || true
        sleep 2
    fi
    
    # Lib√©rer l'ancien port par d√©faut
    local old_port_pid=$(lsof -ti:5000 2>/dev/null)
    if [ ! -z "$old_port_pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t forc√© du processus sur le port 5000 (PID: $old_port_pid)...${NC}"
        kill -9 $old_port_pid 2>/dev/null || true
        sleep 2
    fi
    
    # V√©rifier que les ports sont bien lib√©r√©s
    if lsof -ti:$SERVER_PORT > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Le port $SERVER_PORT est encore occup√©${NC}"
        return 1
    fi
    
    if lsof -ti:$CLIENT_PORT > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Le port $CLIENT_PORT est encore occup√©${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Tous les ports ont √©t√© lib√©r√©s avec succ√®s${NC}"
    return 0
}

# Fonction pour nettoyer compl√®tement l'environnement
clean_environment() {
    echo -e "${YELLOW}üßπ Nettoyage complet de l'environnement...${NC}"
    
    # Arr√™ter tous les processus
    force_kill_ports
    
    # Nettoyer les processus Node.js orphelins
    echo -e "${BLUE}üîç Recherche de processus Node.js orphelins...${NC}"
    local node_pids=$(pgrep -f "node.*ads" 2>/dev/null || true)
    if [ ! -z "$node_pids" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t des processus Node.js orphelins...${NC}"
        echo $node_pids | xargs kill -9 2>/dev/null || true
    fi
    
    # Nettoyer les processus nodemon
    local nodemon_pids=$(pgrep -f "nodemon" 2>/dev/null || true)
    if [ ! -z "$nodemon_pids" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t des processus nodemon...${NC}"
        echo $nodemon_pids | xargs kill -9 2>/dev/null || true
    fi
    
    # Nettoyer les processus next
    local next_pids=$(pgrep -f "next" 2>/dev/null || true)
    if [ ! -z "$next_pids" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t des processus next...${NC}"
        echo $next_pids | xargs kill -9 2>/dev/null || true
    fi
    
    # Attendre un peu pour que tout soit bien arr√™t√©
    sleep 3
    
    echo -e "${GREEN}‚úÖ Environnement nettoy√©${NC}"
}

# Fonction pour v√©rifier et corriger les probl√®mes de ports
check_and_fix_ports() {
    echo -e "${BLUE}üîç V√©rification et correction des ports...${NC}"
    
    local has_issues=false
    
    # V√©rifier le port serveur
    if lsof -ti:$SERVER_PORT > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Le port $SERVER_PORT est occup√©${NC}"
        has_issues=true
    fi
    
    # V√©rifier le port client
    if lsof -ti:$CLIENT_PORT > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Le port $CLIENT_PORT est occup√©${NC}"
        has_issues=true
    fi
    
    if [ "$has_issues" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Probl√®mes d√©tect√©s. Nettoyage automatique...${NC}"
        clean_environment
        return 0
    else
        echo -e "${GREEN}‚úÖ Tous les ports sont disponibles${NC}"
        return 0
    fi
}

# Fonction pour v√©rifier et corriger les probl√®mes de ports (version intelligente)
check_and_fix_ports_smart() {
    echo -e "${BLUE}üîç V√©rification intelligente des ports...${NC}"
    
    local has_issues=false
    
    # V√©rifier le port serveur seulement si on d√©marre le serveur
    if [ "$1" != "client" ]; then
        if lsof -ti:$SERVER_PORT > /dev/null 2>&1; then
            echo -e "${RED}‚ùå Le port $SERVER_PORT est occup√©${NC}"
            has_issues=true
        fi
    fi
    
    # V√©rifier le port client seulement si on d√©marre le client
    if [ "$1" = "client" ]; then
        if lsof -ti:$CLIENT_PORT > /dev/null 2>&1; then
            echo -e "${RED}‚ùå Le port $CLIENT_PORT est occup√©${NC}"
            has_issues=true
        fi
    fi
    
    if [ "$has_issues" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Probl√®mes d√©tect√©s. Nettoyage automatique...${NC}"
        clean_environment
        return 0
    else
        echo -e "${GREEN}‚úÖ Ports n√©cessaires disponibles${NC}"
        return 0
    fi
}

# Fonction pour afficher le logo
show_logo() {
    echo -e "${CYAN}"
    echo "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo " ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó"
    echo " ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë"
    echo " ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë"
    echo " ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${GREEN}           Gestionnaire d'Application ADS SaaS              ${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
}

# Fonction pour v√©rifier le statut des services
check_status() {
    echo -e "${BLUE}üîç V√©rification du statut des services...${NC}"
    echo
    
    # V√©rifier le serveur
    local server_pid=$(lsof -ti:$SERVER_PORT 2>/dev/null)
    if [ ! -z "$server_pid" ]; then
        # V√©rifier si le serveur r√©pond r√©ellement avec un timeout plus long
        if curl -s --max-time 5 http://localhost:$SERVER_PORT/health > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Serveur Backend : ${NC}En cours d'ex√©cution sur le port $SERVER_PORT (PID: $server_pid)"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Serveur Backend : ${NC}Processus pr√©sent mais ne r√©pond pas (PID: $server_pid)"
        fi
    else
        echo -e "${RED}‚ùå Serveur Backend : ${NC}Arr√™t√©"
    fi
    
    # V√©rifier le client
    local client_pid=$(lsof -ti:$CLIENT_PORT 2>/dev/null)
    if [ ! -z "$client_pid" ]; then
        # V√©rifier si le client r√©pond r√©ellement avec un timeout plus long
        if curl -s --max-time 10 http://localhost:$CLIENT_PORT > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Client Frontend : ${NC}En cours d'ex√©cution sur le port $CLIENT_PORT (PID: $client_pid)"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Client Frontend : ${NC}Processus pr√©sent mais ne r√©pond pas (PID: $client_pid)"
        fi
    else
        echo -e "${RED}‚ùå Client Frontend : ${NC}Arr√™t√©"
    fi
    
    echo
    echo -e "${CYAN}üìç URLs d'acc√®s :${NC}"
    echo -e "   Frontend: ${YELLOW}http://localhost:$CLIENT_PORT${NC}"
    echo -e "   Backend:  ${YELLOW}http://localhost:$SERVER_PORT${NC}"
    echo -e "   API Docs: ${YELLOW}http://localhost:$SERVER_PORT/api/docs${NC}"
    echo -e "   API Env:  ${YELLOW}http://localhost:$SERVER_PORT/api/env${NC}"
    echo
}

# Fonction pour v√©rifier la configuration .env
check_env_config() {
    echo -e "${BLUE}üîç V√©rification de la configuration .env...${NC}"
    echo
    
    if [ -f "scripts/check-env.js" ]; then
        node scripts/check-env.js
    else
        echo -e "${RED}‚ùå Script de v√©rification .env non trouv√©${NC}"
        echo -e "${YELLOW}üìù V√©rifiez manuellement le fichier .env √† la racine${NC}"
    fi
    echo
}

# Fonction pour v√©rifier et corriger les probl√®mes de sch√©ma Prisma
check_and_fix_prisma_schema() {
    echo -e "${BLUE}üîç V√©rification et correction du sch√©ma Prisma...${NC}"
    
    # Afficher le r√©pertoire de travail actuel pour le d√©bogage
    echo -e "${BLUE}üìÅ R√©pertoire de travail: $(pwd)${NC}"
    
    # D√©terminer le r√©pertoire de travail pour Prisma
    local prisma_dir=""
    
    # Si nous sommes d√©j√† dans le r√©pertoire server
    if [ -f "prisma/schema.prisma" ]; then
        echo -e "${GREEN}‚úÖ Sch√©ma Prisma trouv√© dans le r√©pertoire actuel${NC}"
        prisma_dir="."
    # Si nous sommes √† la racine et que server/prisma/schema.prisma existe
    elif [ -f "server/prisma/schema.prisma" ]; then
        echo -e "${GREEN}‚úÖ Sch√©ma Prisma trouv√© dans server/prisma/schema.prisma${NC}"
        prisma_dir="server"
    # Si nous sommes dans server et que ../server/prisma/schema.prisma existe
    elif [ -f "../server/prisma/schema.prisma" ]; then
        echo -e "${GREEN}‚úÖ Sch√©ma Prisma trouv√© dans ../server/prisma/schema.prisma${NC}"
        prisma_dir="../server"
    else
        echo -e "${RED}‚ùå Aucun sch√©ma Prisma trouv√©${NC}"
        echo -e "${YELLOW}üìã Contenu du r√©pertoire:${NC}"
        ls -la | head -10
        return 1
    fi
    
    # Changer vers le r√©pertoire contenant le sch√©ma Prisma
    if [ "$prisma_dir" != "." ]; then
        cd "$prisma_dir"
        echo -e "${BLUE}üìÅ Changement vers: $(pwd)${NC}"
    fi
    
    # V√©rifier si le sch√©ma principal existe
    if [ ! -f "prisma/schema.prisma" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Sch√©ma principal manquant, cr√©ation...${NC}"
        if [ -f "prisma/schema.sqlite.prisma" ]; then
            cp prisma/schema.sqlite.prisma prisma/schema.prisma
            echo -e "${GREEN}‚úÖ Sch√©ma copi√© depuis schema.sqlite.prisma${NC}"
        else
            echo -e "${RED}‚ùå Aucun sch√©ma Prisma trouv√©${NC}"
            if [ "$prisma_dir" != "." ]; then
                cd ..
            fi
            return 1
        fi
    fi
    
    # V√©rifier la coh√©rence du sch√©ma
    echo -e "${BLUE}üîç V√©rification de la coh√©rence du sch√©ma...${NC}"
    
    # V√©rifier si le mod√®le Subscription a les bons champs
    if grep -q "currentPeriodStart\|currentPeriodEnd\|cancelAtPeriodEnd" prisma/schema.prisma; then
        echo -e "${YELLOW}‚ö†Ô∏è  Champs Stripe d√©tect√©s dans le sch√©ma, nettoyage...${NC}"
        # Supprimer les champs Stripe non support√©s
        sed -i '' '/currentPeriodStart/d' prisma/schema.prisma
        sed -i '' '/currentPeriodEnd/d' prisma/schema.prisma
        sed -i '' '/cancelAtPeriodEnd/d' prisma/schema.prisma
        echo -e "${GREEN}‚úÖ Champs Stripe supprim√©s du sch√©ma${NC}"
    fi
    
    # V√©rifier que le provider est SQLite
    if ! grep -q 'provider = "sqlite"' prisma/schema.prisma; then
        echo -e "${YELLOW}‚ö†Ô∏è  Provider non-SQLite d√©tect√©, correction...${NC}"
        sed -i '' 's/provider = "postgresql"/provider = "sqlite"/' prisma/schema.prisma
        echo -e "${GREEN}‚úÖ Provider chang√© vers SQLite${NC}"
    fi
    
    # R√©g√©n√©rer le client Prisma
    echo -e "${BLUE}üîß R√©g√©n√©ration du client Prisma...${NC}"
    npx prisma generate
    
    # Recr√©er la base de donn√©es si n√©cessaire
    if [ ! -f "prisma/dev.db" ] || [ ! -s "prisma/dev.db" ]; then
        echo -e "${BLUE}üóÑÔ∏è  Recr√©ation de la base de donn√©es...${NC}"
        npx prisma db push --force-reset
        echo -e "${GREEN}‚úÖ Base de donn√©es recr√©√©e${NC}"
    fi
    
    # Retourner au r√©pertoire original si n√©cessaire
    if [ "$prisma_dir" != "." ]; then
        cd ..
    fi
    
    echo -e "${GREEN}‚úÖ Sch√©ma Prisma v√©rifi√© et corrig√©${NC}"
    return 0
}

# Fonction pour corriger le script de seeding
fix_seed_script() {
    echo -e "${BLUE}üîß Correction du script de seeding...${NC}"
    
    # D√©terminer le r√©pertoire de travail pour le script de seeding
    local seed_dir=""
    
    # Si nous sommes d√©j√† dans le r√©pertoire server
    if [ -d "scripts" ] && [ -f "package.json" ]; then
        echo -e "${GREEN}‚úÖ R√©pertoire server trouv√© dans le r√©pertoire actuel${NC}"
        seed_dir="."
    # Si nous sommes √† la racine et que server/scripts existe
    elif [ -d "server/scripts" ]; then
        echo -e "${GREEN}‚úÖ R√©pertoire server trouv√© dans server/scripts${NC}"
        seed_dir="server"
    # Si nous sommes dans server et que ../server/scripts existe
    elif [ -d "../server/scripts" ]; then
        echo -e "${GREEN}‚úÖ R√©pertoire server trouv√© dans ../server/scripts${NC}"
        seed_dir="../server"
    else
        echo -e "${RED}‚ùå R√©pertoire server introuvable${NC}"
        return 1
    fi
    
    # Changer vers le r√©pertoire contenant les scripts
    if [ "$seed_dir" != "." ]; then
        cd "$seed_dir"
        echo -e "${BLUE}üìÅ Changement vers: $(pwd)${NC}"
    fi
    
    # Cr√©er un script de seeding corrig√©
    cat > scripts/seed-test-data-fixed.js << 'EOF'
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

// Donn√©es de test r√©alistes
const testUsers = [
  { email: 'john.doe@example.com', firstName: 'John', lastName: 'Doe', role: 'USER' },
  { email: 'jane.smith@example.com', firstName: 'Jane', lastName: 'Smith', role: 'USER' },
  { email: 'mike.wilson@example.com', firstName: 'Mike', lastName: 'Wilson', role: 'USER' },
  { email: 'sarah.johnson@example.com', firstName: 'Sarah', lastName: 'Johnson', role: 'USER' },
  { email: 'david.brown@example.com', firstName: 'David', lastName: 'Brown', role: 'USER' },
  { email: 'emma.davis@example.com', firstName: 'Emma', lastName: 'Davis', role: 'USER' },
  { email: 'alex.taylor@example.com', firstName: 'Alex', lastName: 'Taylor', role: 'USER' },
  { email: 'lisa.anderson@example.com', firstName: 'Lisa', lastName: 'Anderson', role: 'USER' },
  { email: 'tom.martinez@example.com', firstName: 'Tom', lastName: 'Martinez', role: 'USER' },
  { email: 'anna.garcia@example.com', firstName: 'Anna', lastName: 'Garcia', role: 'USER' }
];

const testCampaigns = [
  { name: 'Campagne Printemps 2024', description: 'Promotion saisonni√®re', budget: 5000, status: 'ACTIVE' },
  { name: 'Black Friday', description: 'Offres sp√©ciales', budget: 10000, status: 'ACTIVE' },
  { name: 'Nouveau Produit', description: 'Lancement produit', budget: 7500, status: 'ACTIVE' },
  { name: 'Fid√©lisation Client', description: 'Programme de fid√©lit√©', budget: 3000, status: 'PAUSED' },
  { name: 'Test A/B', description: 'Optimisation conversion', budget: 2000, status: 'DRAFT' },
  { name: 'Campagne √ât√©', description: 'Promotions estivales', budget: 6000, status: 'ACTIVE' },
  { name: 'Back to School', description: 'Rentr√©e scolaire', budget: 4000, status: 'COMPLETED' },
  { name: 'Holiday Special', description: 'Offres de fin d\'ann√©e', budget: 8000, status: 'ACTIVE' }
];

const activityTypes = [
  'USER_LOGIN',
  'CAMPAIGN_CREATED',
  'CAMPAIGN_UPDATED',
  'PAYMENT_SUCCESS',
  'PAYMENT_FAILED',
  'USER_REGISTERED',
  'CAMPAIGN_PAUSED',
  'CAMPAIGN_ACTIVATED',
  'BUDGET_ALERT',
  'PERFORMANCE_ALERT'
];

async function seedTestData() {
  try {
    console.log('üå± G√©n√©ration des donn√©es de test...');

    // Cr√©er des utilisateurs de test
    console.log('üë• Cr√©ation des utilisateurs...');
    const createdUsers = [];
    const hashedPassword = await bcrypt.hash('password123', 10);

    for (const userData of testUsers) {
      const user = await prisma.user.upsert({
        where: { email: userData.email },
        update: {},
        create: {
          ...userData,
          password: hashedPassword,
          status: 'ACTIVE',
          emailVerified: true,
          twoFactorEnabled: false
        }
      });
      createdUsers.push(user);
      console.log(`‚úÖ Utilisateur cr√©√©: ${user.email}`);
    }

    // Cr√©er des campagnes de test
    console.log('üìä Cr√©ation des campagnes...');
    const createdCampaigns = [];

    for (const campaignData of testCampaigns) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)];
      
      const campaign = await prisma.campaign.upsert({
        where: { id: `campaign-${Date.now()}-${Math.random().toString(36).substr(2, 9)}` },
        update: {},
        create: {
          ...campaignData,
          userId: randomUser.id,
          spent: Math.random() * campaignData.budget * 0.8,
          impressions: Math.floor(Math.random() * 100000) + 10000,
          clicks: Math.floor(Math.random() * 5000) + 500,
          conversions: Math.floor(Math.random() * 200) + 50,
          startDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),
          endDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000)
        }
      });
      createdCampaigns.push(campaign);
      console.log(`‚úÖ Campagne cr√©√©e: ${campaign.name}`);
    }

    // Cr√©er des activit√©s de test
    console.log('üìù Cr√©ation des activit√©s...');
    const activities = [];

    for (let i = 0; i < 50; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)];
      const randomType = activityTypes[Math.floor(Math.random() * activityTypes.length)];
      const randomCampaign = createdCampaigns[Math.floor(Math.random() * createdCampaigns.length)];

      let title = '';
      let description = '';

      switch (randomType) {
        case 'USER_LOGIN':
          title = 'Connexion utilisateur';
          description = `L'utilisateur ${randomUser.email} s'est connect√©`;
          break;
        case 'CAMPAIGN_CREATED':
          title = 'Nouvelle campagne cr√©√©e';
          description = `Campagne "${randomCampaign.name}" cr√©√©e par ${randomUser.email}`;
          break;
        case 'CAMPAIGN_UPDATED':
          title = 'Campagne mise √† jour';
          description = `Campagne "${randomCampaign.name}" modifi√©e`;
          break;
        case 'PAYMENT_SUCCESS':
          title = 'Paiement r√©ussi';
          description = `Paiement trait√© pour ${randomUser.email}`;
          break;
        case 'USER_REGISTERED':
          title = 'Nouvel utilisateur inscrit';
          description = `Inscription de ${randomUser.email}`;
          break;
        default:
          title = 'Activit√© syst√®me';
          description = 'Action syst√®me effectu√©e';
      }

      const activity = await prisma.activity.create({
        data: {
          type: randomType,
          title,
          description,
          metadata: JSON.stringify({
            userId: randomUser.id,
            campaignId: randomCampaign?.id,
            timestamp: new Date().toISOString()
          }),
          userId: randomUser.id,
          createdAt: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000)
        }
      });
      activities.push(activity);
    }

    console.log(`‚úÖ ${activities.length} activit√©s cr√©√©es`);

    // Cr√©er des abonnements de test (version corrig√©e)
    console.log('üí≥ Cr√©ation des abonnements...');
    const subscriptionPlans = ['BASIC', 'PRO', 'ENTERPRISE'];
    
    for (let i = 0; i < 5; i++) {
      const randomUser = createdUsers[Math.floor(Math.random() * createdUsers.length)];
      const randomPlan = subscriptionPlans[Math.floor(Math.random() * subscriptionPlans.length)];
      
      // V√©rifier si l'utilisateur a d√©j√† un abonnement
      const existingSubscription = await prisma.subscription.findUnique({
        where: { userId: randomUser.id }
      });
      
      if (!existingSubscription) {
        await prisma.subscription.create({
          data: {
            plan: randomPlan,
            status: 'ACTIVE',
            startDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),
            userId: randomUser.id
          }
        });
        console.log(`‚úÖ Abonnement cr√©√© pour ${randomUser.email}`);
      }
    }

    console.log('‚úÖ Abonnements cr√©√©s');

    console.log('');
    console.log('üéâ Donn√©es de test g√©n√©r√©es avec succ√®s!');
    console.log(`üìä ${createdUsers.length} utilisateurs cr√©√©s`);
    console.log(`üìà ${createdCampaigns.length} campagnes cr√©√©es`);
    console.log(`üìù ${activities.length} activit√©s cr√©√©es`);
    console.log('');
    console.log('üîë Identifiants de test:');
    console.log('   Email: john.doe@example.com');
    console.log('   Mot de passe: password123');
    console.log('');
    console.log('üåê Acc√©dez √†: http://localhost:3000/admin/login');

  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des donn√©es:', error);
    console.error('D√©tails:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le script
seedTestData();
EOF

        # Remplacer l'ancien script
        if [ -f "scripts/seed-test-data.js" ]; then
            mv scripts/seed-test-data.js scripts/seed-test-data.js.backup
            echo -e "${YELLOW}‚ö†Ô∏è  Ancien script sauvegard√©${NC}"
        fi
        
        mv scripts/seed-test-data-fixed.js scripts/seed-test-data.js
        echo -e "${GREEN}‚úÖ Script de seeding corrig√©${NC}"
        
        # Retourner au r√©pertoire original si n√©cessaire
        if [ "$seed_dir" != "." ]; then
            cd ..
        fi
}

# Fonction pour installer/configurer l'application compl√®te (int√©gr√©e de setup.sh)
install_app() {
    echo -e "${CYAN}üöÄ Installation automatique d'ADS SaaS...${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # V√©rifier si Node.js est install√©
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©. Installez Node.js 18+ depuis https://nodejs.org${NC}"
        exit 1
    fi

    NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 18 ]; then
        echo -e "${RED}‚ùå Node.js version 18+ requis. Version actuelle: $(node -v)${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Node.js $(node -v) d√©tect√©${NC}"

    # Lib√©rer les ports si n√©cessaire
    echo -e "${BLUE}üì° V√©rification des ports...${NC}"
    kill_port $CLIENT_PORT
    kill_port $SERVER_PORT
    kill_port 5000  # Ancien port par d√©faut

    # Configuration des variables d'environnement unifi√©es
    echo -e "${BLUE}üìù Configuration des variables d'environnement unifi√©es...${NC}"

    # Cr√©er le fichier .env.example unifi√© √† la racine
    if [ ! -f ".env.example" ]; then
        cat > .env.example << 'EOF'
# ========================================
# CONFIGURATION UNIFI√âE ADS SaaS - EXEMPLE
# ========================================

# Configuration de l'environnement
NODE_ENV=development

# Configuration serveur backend
PORT=8000
NEXT_PUBLIC_API_URL=http://localhost:8000

# Configuration base de donn√©es
DATABASE_URL=file:./dev.db

# Configuration JWT
JWT_SECRET=ads_saas_super_secret_jwt_key_change_this_in_production_123456789
JWT_REFRESH_SECRET=ads_saas_refresh_secret_key_change_this_in_production_123456789
JWT_EXPIRES_IN=7d

# Configuration frontend
FRONTEND_URL=http://localhost:3000
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=ads_saas_nextauth_secret_change_this_in_production

# Configuration Stripe (optionnel)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# Configuration email (optionnel)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# Configuration traduction (optionnel)
GOOGLE_TRANSLATE_API_KEY=your_google_translate_api_key
LIBRETRANSLATE_URL=https://libretranslate.com/translate
LIBRETRANSLATE_API_KEY=your_libretranslate_api_key

# Configuration CORS
CORS_ORIGIN=http://localhost:3000
EOF
        echo -e "${GREEN}‚úÖ .env.example unifi√© cr√©√©${NC}"
    fi

    # Cr√©er le fichier .env unifi√© √† la racine
    if [ ! -f ".env" ]; then
        cp .env.example .env
        echo -e "${GREEN}‚úÖ .env unifi√© cr√©√©${NC}"
    fi

    # V√©rifier que le fichier .env unifi√© existe
    echo -e "${BLUE}‚úÖ Configuration unifi√©e - un seul fichier .env √† la racine${NC}"

    # Installer les d√©pendances
    echo -e "${BLUE}üì¶ Installation des d√©pendances (cela peut prendre quelques minutes)...${NC}"

    # Installer les d√©pendances du projet principal
    if [ -f "package.json" ]; then
        npm install > /dev/null 2>&1
        echo -e "${GREEN}‚úÖ D√©pendances du projet principal install√©es${NC}"
    fi

    # Installer les d√©pendances du serveur
    echo -e "${BLUE}üì¶ Installation des d√©pendances du serveur...${NC}"
    if [ -d "server" ]; then
        cd server
        npm install > /dev/null 2>&1
        cd ..
        echo -e "${GREEN}‚úÖ D√©pendances du serveur install√©es${NC}"
    fi

    # Installer les d√©pendances du client
    echo -e "${BLUE}üì¶ Installation des d√©pendances du client...${NC}"
    if [ -d "client" ]; then
        cd client
        npm install > /dev/null 2>&1
        cd ..
        echo -e "${GREEN}‚úÖ D√©pendances du client install√©es${NC}"
    fi

    # Configurer la base de donn√©es avec les nouvelles fonctions intelligentes
    echo -e "${BLUE}üóÑÔ∏è  Configuration de la base de donn√©es SQLite...${NC}"
    if [ -d "server" ]; then
        # Utiliser les fonctions de correction intelligente
        check_and_fix_prisma_schema
        fix_seed_script
        
        cd server

        # G√©n√©rer le client Prisma
        echo -e "${BLUE}üîß G√©n√©ration du client Prisma...${NC}"
        npx prisma generate > /dev/null 2>&1

        # Cr√©er et migrer la base de donn√©es
        echo -e "${BLUE}üóÑÔ∏è  Cr√©ation de la base de donn√©es...${NC}"
        npx prisma db push > /dev/null 2>&1

        # Seeder la base de donn√©es avec des donn√©es de d√©monstration
        echo -e "${BLUE}üå± Ajout des donn√©es de d√©monstration...${NC}"
        if [ -f "scripts/seed-test-data.js" ]; then
            node scripts/seed-test-data.js > /dev/null 2>&1
        else
            npx prisma db seed > /dev/null 2>&1
        fi

        cd ..
        echo -e "${GREEN}‚úÖ Base de donn√©es configur√©e avec les donn√©es de d√©monstration${NC}"
    fi

    echo
    echo -e "${GREEN}üéâ Installation termin√©e avec succ√®s !${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo
    echo -e "${GREEN}‚úÖ Projet configur√©${NC}"
    echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
    echo -e "${GREEN}‚úÖ Base de donn√©es cr√©√©e${NC}"
    echo -e "${GREEN}‚úÖ Donn√©es de d√©monstration ajout√©es${NC}"
    echo
    echo -e "${BLUE}URLs d'acc√®s:${NC}"
    echo "üåê Frontend: http://localhost:$CLIENT_PORT"
    echo "üì° Backend:  http://localhost:$SERVER_PORT"
    echo "üìñ API Docs: http://localhost:$SERVER_PORT/api/docs"
    echo "üè• Health:   http://localhost:$SERVER_PORT/health"
    echo
    echo -e "${BLUE}Comptes de test:${NC}"
    echo "üë§ Admin: admin@ads-saas.com / admin123"
    echo "üë§ D√©mo:  demo@ads-saas.com / demo123"
    echo
    echo -e "${GREEN}‚úÖ Tout est pr√™t ! Utilisez ./run.sh start pour d√©marrer üöÄ${NC}"
}

# Fonction pour d√©marrer l'application compl√®te
start_app() {
    echo -e "${GREEN}üöÄ D√©marrage de l'application ADS SaaS...${NC}"
    start_server
    sleep 3
    start_client
    # V√©rification automatique apr√®s d√©marrage complet
    echo -e "${BLUE}üîç V√©rification post-d√©marrage...${NC}"
    check_backend_running
    check_login_route
}

# Fonction pour d√©marrer l'application de mani√®re simple (int√©gr√©e de start.sh)
simple_start() {
    echo -e "${GREEN}üöÄ D√©marrage simple d'ADS SaaS...${NC}"
    
    # V√©rifier et corriger les probl√®mes de ports
    check_and_fix_ports

    # D√©marrer le serveur backend
    echo -e "${BLUE}üì° D√©marrage du serveur backend (port $SERVER_PORT)...${NC}"
    if [ -d "server" ]; then
        cd server
        mkdir -p ../logs
        PORT=$SERVER_PORT npm start > ../logs/server.log 2>&1 &
        SERVER_PID=$!
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
        exit 1
    fi

    sleep 3

    # D√©marrer le client frontend
    echo -e "${BLUE}üåê D√©marrage du client frontend (port $CLIENT_PORT)...${NC}"
    if [ -d "client" ]; then
        cd client
        mkdir -p ../logs
        npm run dev > ../logs/client.log 2>&1 &
        CLIENT_PID=$!
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire client non trouv√©${NC}"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Les deux services sont d√©marr√©s.${NC}"
    echo -e "${YELLOW}Appuyez sur Entr√©e pour arr√™ter/red√©marrer...${NC}"
    read
    echo -e "${YELLOW}üõë Arr√™t des services...${NC}"
    kill $SERVER_PID 2>/dev/null || true
    kill $CLIENT_PID 2>/dev/null || true
    sleep 2
    echo -e "${GREEN}‚úÖ Les services ont √©t√© arr√™t√©s.${NC}"
}

# Fonction pour arr√™ter l'application de mani√®re simple (int√©gr√©e de stop.sh)
simple_stop() {
    echo -e "${YELLOW}üõë Arr√™t simple d'ADS SaaS...${NC}"
    
    # Arr√™ter les services avec nettoyage complet
    clean_environment

    echo -e "${GREEN}‚úÖ Tous les services ont √©t√© arr√™t√©s${NC}"
}

# Fonction pour d√©marrer uniquement le serveur
start_server() {
    echo -e "${GREEN}üöÄ D√©marrage du serveur backend...${NC}"
    
    # Utiliser la m√©thode intelligente de d√©marrage
    start_server_intelligent
    
    # V√©rification automatique du backend et de la route de login
    check_backend_running
    check_login_route
    check_auth_multiple_methods
}

# Fonction pour arr√™ter uniquement le serveur
stop_server() {
    echo -e "${YELLOW}üõë Arr√™t du serveur backend...${NC}"
    
    # Utiliser la fonction de nettoyage forc√© pour le port serveur
    local server_pid=$(lsof -ti:$SERVER_PORT 2>/dev/null)
    if [ ! -z "$server_pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t forc√© du processus serveur sur le port $SERVER_PORT (PID: $server_pid)...${NC}"
        kill -9 $server_pid 2>/dev/null || true
        sleep 2
        echo -e "${GREEN}‚úÖ Serveur backend arr√™t√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun serveur en cours d'ex√©cution sur le port $SERVER_PORT${NC}"
    fi
}

# Fonction pour red√©marrer uniquement le serveur
restart_server() {
    echo -e "${PURPLE}üîÑ Red√©marrage du serveur backend...${NC}"
    stop_server
    sleep 2
    start_server
    # V√©rification automatique apr√®s red√©marrage
    check_backend_running
    check_login_route
}

# Fonction pour d√©marrer uniquement le client
start_client() {
    echo -e "${GREEN}üöÄ D√©marrage du client frontend...${NC}"
    
    if [ -d "client" ]; then
        cd client
        echo -e "${CYAN}üåê D√©marrage du client frontend (port $CLIENT_PORT)...${NC}"
        
        # V√©rifier et corriger les probl√®mes de ports (intelligente)
        check_and_fix_ports_smart client
        
        # Nettoyer le cache Next.js si n√©cessaire
        if [ -d ".next" ]; then
            echo -e "${YELLOW}üóëÔ∏è  Nettoyage du cache Next.js...${NC}"
            rm -rf .next
        fi
        
        # D√©marrer le client
        if npm run dev > /dev/null 2>&1 & then
            # Attendre un peu pour que le client d√©marre
            sleep 5
            
            # V√©rifier si le client r√©pond
            if curl -s http://localhost:$CLIENT_PORT > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Client frontend d√©marr√© avec succ√®s${NC}"
                echo -e "${YELLOW}üåê Frontend: http://localhost:$CLIENT_PORT${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Client d√©marr√© mais ne r√©pond pas encore sur le port $CLIENT_PORT${NC}"
                echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez les logs avec: ./run.sh logs-client${NC}"
            fi
        else
            echo -e "${RED}‚ùå Erreur lors du d√©marrage du client${NC}"
            echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez les logs avec: ./run.sh logs-client${NC}"
        fi
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire client non trouv√©${NC}"
    fi
}

# Fonction pour arr√™ter uniquement le client
stop_client() {
    echo -e "${YELLOW}üõë Arr√™t du client frontend...${NC}"
    
    # Utiliser la fonction de nettoyage forc√© pour le port client
    local client_pid=$(lsof -ti:$CLIENT_PORT 2>/dev/null)
    if [ ! -z "$client_pid" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arr√™t forc√© du processus client sur le port $CLIENT_PORT (PID: $client_pid)...${NC}"
        kill -9 $client_pid 2>/dev/null || true
        sleep 2
        echo -e "${GREEN}‚úÖ Client frontend arr√™t√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun client en cours d'ex√©cution sur le port $CLIENT_PORT${NC}"
    fi
}

# Fonction pour red√©marrer uniquement le client
restart_client() {
    echo -e "${PURPLE}üîÑ Red√©marrage du client frontend...${NC}"
    stop_client
    sleep 2
    start_client
}

# Fonction pour installer/configurer uniquement le serveur
setup_server() {
    echo -e "${CYAN}‚öôÔ∏è  Configuration du serveur backend...${NC}"
    
    if [ -d "server" ]; then
        cd server
        echo -e "${CYAN}üì¶ Installation des d√©pendances du serveur...${NC}"
        if npm install; then
            echo -e "${GREEN}‚úÖ D√©pendances du serveur install√©es${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de l'installation des d√©pendances du serveur${NC}"
        fi
        
        # Cr√©er le fichier .env s'il n'existe pas
        if [ ! -f ".env" ]; then
            echo -e "${CYAN}üìù Cr√©ation du fichier .env...${NC}"
            cat > .env << EOF
PORT=$SERVER_PORT
NODE_ENV=development
DATABASE_URL="file:./dev.db"
JWT_SECRET="ads-saas-secret-key-change-in-production"
FRONTEND_URL="http://localhost:$CLIENT_PORT"
EOF
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√©${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env existe d√©j√†${NC}"
        fi
        
        echo -e "${CYAN}üóÑÔ∏è  Configuration de la base de donn√©es...${NC}"
        if npm run db:generate; then
            echo -e "${GREEN}‚úÖ Client Prisma g√©n√©r√©${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de la g√©n√©ration du client Prisma${NC}"
        fi
        
        if npm run db:push; then
            echo -e "${GREEN}‚úÖ Base de donn√©es configur√©e${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de la configuration de la base de donn√©es${NC}"
        fi
        
        # Ajouter des donn√©es de d√©monstration si la base est vide
        echo -e "${CYAN}üå± Ajout des donn√©es de d√©monstration...${NC}"
        if npm run db:seed 2>/dev/null; then
            echo -e "${GREEN}‚úÖ Donn√©es de d√©monstration ajout√©es${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Erreur lors de l'ajout des donn√©es de d√©monstration (normal avec le sch√©ma simplifi√©)${NC}"
        fi
        
        cd ..
        echo -e "${GREEN}‚úÖ Configuration du serveur termin√©e${NC}"
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
    fi
}

# Fonction pour installer/configurer uniquement le client
setup_client() {
    echo -e "${CYAN}‚öôÔ∏è  Configuration du client frontend...${NC}"
    
    if [ -d "client" ]; then
        cd client
        echo -e "${CYAN}üì¶ Installation des d√©pendances du client...${NC}"
        if npm install; then
            echo -e "${GREEN}‚úÖ D√©pendances du client install√©es${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de l'installation des d√©pendances du client${NC}"
        fi
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire client non trouv√©${NC}"
    fi
}

# Fonction pour afficher les logs du serveur
show_server_logs() {
    echo -e "${BLUE}üìã Affichage des logs du serveur...${NC}"
    echo
    
    if [ -f "logs/server.log" ]; then
        echo -e "${CYAN}üìÅ Logs du serveur (20 derni√®res lignes):${NC}"
        tail -n 20 logs/server.log
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun fichier de log trouv√© pour le serveur${NC}"
    fi
    
    # Processus serveur en cours
    echo -e "${CYAN}üîÑ Processus serveur en cours d'ex√©cution:${NC}"
    lsof -ti:$SERVER_PORT 2>/dev/null | while read pid; do
        if [ ! -z "$pid" ]; then
            ps -p $pid -o pid,ppid,command 2>/dev/null || ps -p $pid -o pid,ppid,comm 2>/dev/null || echo "PID: $pid"
        fi
    done
}

# Fonction pour afficher les logs du client
show_client_logs() {
    echo -e "${BLUE}üìã Affichage des logs du client...${NC}"
    echo
    
    if [ -f "logs/client.log" ]; then
        echo -e "${CYAN}üìÅ Logs du client (20 derni√®res lignes):${NC}"
        tail -n 20 logs/client.log
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucun fichier de log trouv√© pour le client${NC}"
    fi
    
    # Processus client en cours
    echo -e "${CYAN}üîÑ Processus client en cours d'ex√©cution:${NC}"
    lsof -ti:$CLIENT_PORT 2>/dev/null | while read pid; do
        if [ ! -z "$pid" ]; then
            ps -p $pid -o pid,ppid,command 2>/dev/null || ps -p $pid -o pid,ppid,comm 2>/dev/null || echo "PID: $pid"
        fi
    done
}

# Fonction pour ex√©cuter le type-check du serveur uniquement
run_server_type_check() {
    echo -e "${BLUE}üîç Ex√©cution du type-check du serveur...${NC}"
    echo
    
    if [ -d "server" ]; then
        cd server
        echo -e "${CYAN}üìÅ Type-check du serveur backend...${NC}"
        if npm run type-check; then
            echo -e "${GREEN}‚úÖ Type-check du serveur r√©ussi${NC}"
        else
            echo -e "${RED}‚ùå Erreurs de type dans le serveur${NC}"
        fi
        cd ..
    else
        echo -e "${YELLOW}‚ö†Ô∏è  R√©pertoire server non trouv√©${NC}"
    fi
}

# Fonction pour ex√©cuter le type-check du client uniquement
run_client_type_check() {
    echo -e "${BLUE}üîç Ex√©cution du type-check du client...${NC}"
    echo
    
    if [ -d "client" ]; then
        cd client
        echo -e "${CYAN}üìÅ Type-check du client frontend...${NC}"
        if npm run type-check; then
            echo -e "${GREEN}‚úÖ Type-check du client r√©ussi${NC}"
        else
            echo -e "${RED}‚ùå Erreurs de type dans le client${NC}"
        fi
        cd ..
    else
        echo -e "${YELLOW}‚ö†Ô∏è  R√©pertoire client non trouv√©${NC}"
    fi
}

# Fonction pour d√©marrer l'application compl√®te
start_app() {
    echo -e "${GREEN}üöÄ D√©marrage de l'application ADS SaaS...${NC}"
    start_server
    sleep 3
    start_client
    # V√©rification automatique apr√®s d√©marrage complet
    echo -e "${BLUE}üîç V√©rification post-d√©marrage...${NC}"
    check_backend_running
    check_login_route
}

# Fonction pour arr√™ter l'application compl√®te
stop_app() {
    echo -e "${YELLOW}üõë Arr√™t de l'application ADS SaaS...${NC}"
    stop_server
    stop_client
}

# Fonction pour red√©marrer l'application compl√®te
restart_app() {
    echo -e "${PURPLE}üîÑ Red√©marrage de l'application ADS SaaS...${NC}"
    stop_app
    sleep 2
    start_app
    # V√©rification automatique apr√®s red√©marrage complet
    echo -e "${BLUE}üîç V√©rification post-red√©marrage...${NC}"
    check_backend_running
    check_login_route
}

# Fonction pour installer/configurer l'application compl√®te
setup_app() {
    echo -e "${CYAN}‚öôÔ∏è  Configuration de l'application ADS SaaS...${NC}"
    setup_server
    setup_client
}

# Fonction pour afficher tous les logs
show_logs() {
    echo -e "${BLUE}üìã Affichage des logs r√©cents...${NC}"
    show_server_logs
    echo
    show_client_logs
}

# Fonction pour ex√©cuter le type-check complet
run_type_check() {
    echo -e "${BLUE}üîç Ex√©cution du type-check...${NC}"
    run_server_type_check
    echo
    run_client_type_check
    echo -e "${GREEN}‚úÖ Type-check termin√©${NC}"
}

# Fonction pour nettoyer l'environnement
clean_env() {
    echo -e "${YELLOW}üßπ Nettoyage de l'environnement...${NC}"
    
    # Arr√™ter les services
    stop_app
    
    # Nettoyer le cache Next.js
    echo -e "${YELLOW}üóëÔ∏è  Nettoyage du cache Next.js...${NC}"
    if [ -d "client/.next" ]; then
        rm -rf client/.next
        echo -e "${GREEN}‚úÖ Cache Next.js supprim√©${NC}"
    fi
    
    # Nettoyer les node_modules si demand√©
    read -p "Voulez-vous supprimer les node_modules ? (y/N): " clean_modules
    if [[ $clean_modules =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üóëÔ∏è  Suppression des node_modules...${NC}"
        rm -rf client/node_modules server/node_modules node_modules
    fi
    
    # Nettoyer les logs
    read -p "Voulez-vous supprimer les logs ? (y/N): " clean_logs
    if [[ $clean_logs =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üóëÔ∏è  Suppression des logs...${NC}"
        rm -rf logs/* 2>/dev/null || true
    fi
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

# Fonction pour nettoyer et r√©installer les d√©pendances
clean_dependencies() {
    echo -e "${YELLOW}üßπ Nettoyage et r√©installation des d√©pendances...${NC}"
    
    # Arr√™ter les services
    stop_app
    
    echo -e "${BLUE}üóëÔ∏è  Suppression des node_modules et package-lock.json...${NC}"
    
    # Nettoyer le projet principal
    if [ -d "node_modules" ]; then
        rm -rf node_modules
        echo -e "${GREEN}‚úÖ node_modules principal supprim√©${NC}"
    fi
    if [ -f "package-lock.json" ]; then
        rm -f package-lock.json
        echo -e "${GREEN}‚úÖ package-lock.json principal supprim√©${NC}"
    fi
    
    # Nettoyer le serveur
    if [ -d "server" ]; then
        if [ -d "server/node_modules" ]; then
            rm -rf server/node_modules
            echo -e "${GREEN}‚úÖ node_modules serveur supprim√©${NC}"
        fi
        if [ -f "server/package-lock.json" ]; then
            rm -f server/package-lock.json
            echo -e "${GREEN}‚úÖ package-lock.json serveur supprim√©${NC}"
        fi
    fi
    
    # Nettoyer le client
    if [ -d "client" ]; then
        if [ -d "client/node_modules" ]; then
            rm -rf client/node_modules
            echo -e "${GREEN}‚úÖ node_modules client supprim√©${NC}"
        fi
        if [ -f "client/package-lock.json" ]; then
            rm -f client/package-lock.json
            echo -e "${GREEN}‚úÖ package-lock.json client supprim√©${NC}"
        fi
        if [ -d "client/.next" ]; then
            rm -rf client/.next
            echo -e "${GREEN}‚úÖ .next client supprim√©${NC}"
        fi
    fi
    
    echo -e "${BLUE}üì¶ R√©installation des d√©pendances...${NC}"
    
    # R√©installer les d√©pendances du projet principal
    if [ -f "package.json" ]; then
        echo -e "${CYAN}üì¶ Installation des d√©pendances du projet principal...${NC}"
        npm install
        echo -e "${GREEN}‚úÖ D√©pendances du projet principal install√©es${NC}"
    fi
    
    # R√©installer les d√©pendances du serveur
    if [ -d "server" ]; then
        echo -e "${CYAN}üì¶ Installation des d√©pendances du serveur...${NC}"
        cd server
        npm install
        cd ..
        echo -e "${GREEN}‚úÖ D√©pendances du serveur install√©es${NC}"
    fi
    
    # R√©installer les d√©pendances du client
    if [ -d "client" ]; then
        echo -e "${CYAN}üì¶ Installation des d√©pendances du client...${NC}"
        cd client
        npm install
        cd ..
        echo -e "${GREEN}‚úÖ D√©pendances du client install√©es${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Nettoyage et r√©installation des d√©pendances termin√©${NC}"
}

# Fonction pour nettoyer et rebuild Next.js (int√©gr√©e de fix-nextjs-chunks.sh)
fix_nextjs_chunks() {
    echo -e "${BLUE}üîß Nettoyage et rebuild Next.js...${NC}"
    
    # 1. Arr√™ter tous les processus Next.js
    echo -e "${YELLOW}1. Arr√™t des processus Next.js...${NC}"
    pkill -f "next dev" 2>/dev/null || true
    pkill -f "next start" 2>/dev/null || true
    sleep 2

    # 2. Nettoyer le cache Next.js
    echo -e "${YELLOW}2. Nettoyage du cache Next.js...${NC}"
    cd client
    rm -rf .next
    rm -rf node_modules/.cache
    rm -rf .swc

    # 3. Nettoyer les d√©pendances
    echo -e "${YELLOW}3. Nettoyage des d√©pendances...${NC}"
    rm -rf node_modules
    rm -f package-lock.json

    # 4. R√©installer les d√©pendances
    echo -e "${YELLOW}4. R√©installation des d√©pendances...${NC}"
    npm install

    # 5. V√©rifier TypeScript
    echo -e "${YELLOW}5. V√©rification TypeScript...${NC}"
    npx tsc --noEmit

    # 6. Build de production pour tester
    echo -e "${YELLOW}6. Build de production...${NC}"
    npm run build

    # 7. D√©marrer en mode d√©veloppement
    echo -e "${YELLOW}7. D√©marrage en mode d√©veloppement...${NC}"
    npm run dev &

    # Attendre que le serveur d√©marre
    sleep 5

    # 8. Tester l'acc√®s
    echo -e "${YELLOW}8. Test de l'acc√®s...${NC}"
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Serveur accessible sur http://localhost:3000${NC}"
    elif curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 | grep -q "200"; then
        echo -e "${GREEN}‚úÖ Serveur accessible sur http://localhost:3001${NC}"
    else
        echo -e "${RED}‚ùå Serveur non accessible${NC}"
    fi

    cd ..
    echo -e "${GREEN}‚úÖ Nettoyage et rebuild termin√©s${NC}"
    echo -e "${BLUE}üåê Acc√©dez √† http://localhost:3000/dashboard ou http://localhost:3001/dashboard${NC}"
}

# Fonction pour configurer le cache busting
setup_cache_busting() {
    echo -e "${CYAN}üîÑ Configuration du Cache Busting...${NC}"
    
    if [ -f "scripts/setup-cache-busting.sh" ]; then
        chmod +x scripts/setup-cache-busting.sh
        ./scripts/setup-cache-busting.sh
    else
        echo -e "${RED}‚ùå Script setup-cache-busting.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour tester le cache busting
test_cache_busting() {
    echo -e "${CYAN}üß™ Test du Cache Busting...${NC}"
    
    if [ -f "scripts/test-cache-busting.sh" ]; then
        chmod +x scripts/test-cache-busting.sh
        ./scripts/test-cache-busting.sh
    else
        echo -e "${RED}‚ùå Script test-cache-busting.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour mettre √† jour la version du cache busting
update_cache_busting_version() {
    echo -e "${CYAN}üîÑ Mise √† jour de la version du Cache Busting...${NC}"
    
    if [ -f "scripts/update-version.sh" ]; then
        chmod +x scripts/update-version.sh
        ./scripts/update-version.sh
    else
        echo -e "${RED}‚ùå Script update-version.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour ouvrir la d√©monstration du cache busting
open_cache_busting_demo() {
    echo -e "${CYAN}üåê Ouverture de la d√©monstration du Cache Busting...${NC}"
    
    # V√©rifier si l'application est en cours d'ex√©cution
    if lsof -ti:$CLIENT_PORT > /dev/null 2>&1; then
        if command -v open > /dev/null 2>&1; then
            open "http://localhost:$CLIENT_PORT/demo"
        elif command -v xdg-open > /dev/null 2>&1; then
            xdg-open "http://localhost:$CLIENT_PORT/demo"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Impossible d'ouvrir automatiquement le navigateur${NC}"
            echo -e "Veuillez ouvrir manuellement: ${YELLOW}http://localhost:$CLIENT_PORT/demo${NC}"
        fi
    else
        echo -e "${RED}‚ùå L'application n'est pas en cours d'ex√©cution${NC}"
        echo -e "Veuillez d'abord d√©marrer l'application (option 1)"
    fi
}

# Fonction pour ouvrir les URLs dans le navigateur
open_browser() {
    echo -e "${CYAN}üåê Ouverture dans le navigateur...${NC}"
    
    # V√©rifier si les services sont en cours d'ex√©cution
    if lsof -ti:$CLIENT_PORT > /dev/null 2>&1; then
        if command -v open > /dev/null 2>&1; then
            open "http://localhost:$CLIENT_PORT"
        elif command -v xdg-open > /dev/null 2>&1; then
            xdg-open "http://localhost:$CLIENT_PORT"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Impossible d'ouvrir automatiquement le navigateur${NC}"
            echo -e "Veuillez ouvrir manuellement: ${YELLOW}http://localhost:$CLIENT_PORT${NC}"
        fi
    else
        echo -e "${RED}‚ùå L'application n'est pas en cours d'ex√©cution${NC}"
        echo -e "Veuillez d'abord d√©marrer l'application (option 1)"
    fi
}

# Fonction pour configurer le syst√®me d'administration
setup_admin_system() {
    echo -e "${CYAN}üëë Configuration du syst√®me d'administration...${NC}"
    
    if [ -f "scripts/setup-admin-system.sh" ]; then
        chmod +x scripts/setup-admin-system.sh
        ./scripts/setup-admin-system.sh
    else
        echo -e "${RED}‚ùå Script setup-admin-system.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour cr√©er les comptes de d√©monstration
create_demo_accounts() {
    echo -e "${CYAN}üë• Cr√©ation des comptes de d√©monstration...${NC}"
    
    if [ -f "scripts/create-demo-accounts.sh" ]; then
        chmod +x scripts/create-demo-accounts.sh
        ./scripts/create-demo-accounts.sh
    else
        echo -e "${RED}‚ùå Script create-demo-accounts.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour configurer le monitoring
setup_monitoring() {
    echo -e "${CYAN}üìä Configuration du monitoring...${NC}"
    
    if [ -f "scripts/setup-monitoring.sh" ]; then
        chmod +x scripts/setup-monitoring.sh
        ./scripts/setup-monitoring.sh
    else
        echo -e "${RED}‚ùå Script setup-monitoring.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour d√©ployer en production
deploy_production() {
    echo -e "${CYAN}üöÄ D√©ploiement en production...${NC}"
    
    if [ -f "scripts/deploy-production.sh" ]; then
        chmod +x scripts/deploy-production.sh
        ./scripts/deploy-production.sh
    else
        echo -e "${RED}‚ùå Script deploy-production.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour corriger les erreurs
fix_errors() {
    echo -e "${CYAN}üîß Diagnostic et correction des erreurs...${NC}"
    
    if [ -f "scripts/fix-common-issues.sh" ]; then
        chmod +x scripts/fix-common-issues.sh
        ./scripts/fix-common-issues.sh
    else
        echo -e "${RED}‚ùå Script fix-common-issues.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour initialiser la base de donn√©es
init_database() {
    echo -e "${CYAN}üóÑÔ∏è  Initialisation de la base de donn√©es...${NC}"
    
    if [ -f "scripts/init-database.sh" ]; then
        chmod +x scripts/init-database.sh
        ./scripts/init-database.sh
    else
        echo -e "${RED}‚ùå Script init-database.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour g√©rer l'environnement
manage_env() {
    echo -e "${CYAN}‚öôÔ∏è  Gestion de l'environnement...${NC}"
    manage_env_script
}

# Fonction pour configurer SSL
setup_ssl() {
    echo -e "${CYAN}üîí Configuration SSL...${NC}"
    
    if [ -f "scripts/setup-ssl.sh" ]; then
        chmod +x scripts/setup-ssl.sh
        ./scripts/setup-ssl.sh
    else
        echo -e "${RED}‚ùå Script setup-ssl.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour d√©ployer
deploy() {
    echo -e "${CYAN}üöÄ D√©ploiement...${NC}"
    
    if [ -f "scripts/deploy.sh" ]; then
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh
    else
        echo -e "${RED}‚ùå Script deploy.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour configurer logrotate
setup_logrotate() {
    echo -e "${CYAN}üìã Configuration de logrotate...${NC}"
    
    if [ -f "scripts/setup-logrotate.sh" ]; then
        chmod +x scripts/setup-logrotate.sh
        ./scripts/setup-logrotate.sh
    else
        echo -e "${RED}‚ùå Script setup-logrotate.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour g√©rer les logs
manage_logs() {
    echo -e "${CYAN}üìã Gestion des logs...${NC}"
    
    if [ -f "scripts/manage-logs.sh" ]; then
        chmod +x scripts/manage-logs.sh
        ./scripts/manage-logs.sh
    else
        echo -e "${RED}‚ùå Script manage-logs.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour red√©marrer les services
restart_services() {
    echo -e "${CYAN}üîÑ Red√©marrage des services...${NC}"
    
    if [ -f "scripts/restart-services.sh" ]; then
        chmod +x scripts/restart-services.sh
        ./scripts/restart-services.sh
    else
        echo -e "${RED}‚ùå Script restart-services.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour tester les logs
test_logs() {
    echo -e "${CYAN}üß™ Test des logs...${NC}"
    
    if [ -f "scripts/test-logs.sh" ]; then
        chmod +x scripts/test-logs.sh
        ./scripts/test-logs.sh
    else
        echo -e "${RED}‚ùå Script test-logs.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour tester le sitemap
test_sitemap() {
    echo -e "${CYAN}üß™ Test du sitemap...${NC}"
    
    if [ -f "scripts/test-sitemap.js" ]; then
        node scripts/test-sitemap.js
    else
        echo -e "${RED}‚ùå Script test-sitemap.js non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour ex√©cuter les tests de stress
run_stress_test() {
    echo -e "${CYAN}üß™ Tests de stress...${NC}"
    
    if [ -f "scripts/stress-test.js" ]; then
        node scripts/stress-test.js
    else
        echo -e "${RED}‚ùå Script stress-test.js non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour ex√©cuter les tests de charge
run_load_test() {
    echo -e "${CYAN}üß™ Tests de charge...${NC}"
    
    if [ -f "scripts/load-test.js" ]; then
        node scripts/load-test.js
    else
        echo -e "${RED}‚ùå Script load-test.js non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour tester le backend
test_backend() {
    echo -e "${CYAN}üß™ Test du backend...${NC}"
    
    if [ -f "scripts/test-backend.js" ]; then
        node scripts/test-backend.js
    else
        echo -e "${RED}‚ùå Script test-backend.js non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour v√©rifier l'environnement
check_environment() {
    echo -e "${CYAN}üîç V√©rification de l'environnement...${NC}"
    
    if [ -f "scripts/check-env.js" ]; then
        node scripts/check-env.js
    else
        echo -e "${RED}‚ùå Script check-env.js non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour ex√©cuter toutes les op√©rations (sauf stop)
all_scripts() {
    echo -e "${PURPLE}üöÄ Ex√©cution de toutes les op√©rations...${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # 1. Nettoyage complet de l'environnement
    echo -e "${CYAN}üìã √âtape 1/15: Nettoyage complet de l'environnement${NC}"
    clean_environment
    echo
    
    # 2. V√©rification de l'environnement
    echo -e "${CYAN}üìã √âtape 2/15: V√©rification de l'environnement${NC}"
    check_environment
    echo
    
    # 3. Configuration/Installation
    echo -e "${CYAN}üìã √âtape 3/15: Configuration/Installation${NC}"
    setup_server
    setup_client
    echo
    
    # 4. Initialisation de la base de donn√©es
    echo -e "${CYAN}üìã √âtape 4/15: Initialisation de la base de donn√©es${NC}"
    init_database_script
    echo
    
    # 5. Configuration du syst√®me d'administration
    echo -e "${CYAN}üìã √âtape 5/15: Configuration du syst√®me d'administration${NC}"
    setup_admin_system_script
    echo
    
    # 6. Cr√©ation des comptes de d√©monstration
    echo -e "${CYAN}üìã √âtape 6/15: Cr√©ation des comptes de d√©monstration${NC}"
    create_demo_accounts_script
    echo
    
    # 7. Configuration du monitoring
    echo -e "${CYAN}üìã √âtape 7/15: Configuration du monitoring${NC}"
    setup_monitoring_script
    echo
    
    # 8. Configuration SSL
    echo -e "${CYAN}üìã √âtape 8/15: Configuration SSL${NC}"
    setup_ssl_script
    echo
    
    # 9. Configuration de logrotate
    echo -e "${CYAN}üìã √âtape 9/15: Configuration de logrotate${NC}"
    setup_logrotate
    echo
    
    # 10. Configuration du cache busting
    echo -e "${CYAN}üìã √âtape 10/15: Configuration du cache busting${NC}"
    setup_cache_busting_script
    echo
    
    # 11. Correction des erreurs
    echo -e "${CYAN}üìã √âtape 11/15: Correction des erreurs${NC}"
    fix_errors_script
    echo
    
    # 12. Red√©marrage des services
    echo -e "${CYAN}üìã √âtape 12/15: Red√©marrage des services${NC}"
    restart_services_script
    echo
    
    # 13. D√©marrage de l'application (processus vivants)
    echo -e "${CYAN}üìã √âtape 13/15: D√©marrage de l'application${NC}"
    # D√©marrer le serveur backend
    echo -e "${BLUE}üì° D√©marrage du serveur backend (port $SERVER_PORT)...${NC}"
    if [ -d "server" ]; then
        cd server
        mkdir -p ../logs
        PORT=$SERVER_PORT npm run dev > ../logs/server.log 2>&1 &
        SERVER_PID=$!
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
        exit 1
    fi
    sleep 5
    # D√©marrer le client frontend
    echo -e "${BLUE}üåê D√©marrage du client frontend (port $CLIENT_PORT)...${NC}"
    if [ -d "client" ]; then
        cd client
        mkdir -p ../logs
        npm run dev > ../logs/client.log 2>&1 &
        CLIENT_PID=$!
        cd ..
    else
        echo -e "${RED}‚ùå R√©pertoire client non trouv√©${NC}"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi
    echo -e "${GREEN}‚úÖ Les deux services sont d√©marr√©s.${NC}"
    echo
    
    # 14. Attendre que les services soient pr√™ts
    echo -e "${CYAN}‚è≥ Attente que les services soient pr√™ts...${NC}"
    sleep 10
    
    # 15. V√©rification du statut
    echo -e "${CYAN}üìã √âtape 14/15: V√©rification du statut${NC}"
    check_status
    echo
    
    # 16. Type-check
    echo -e "${CYAN}üìã √âtape 15/15: V√©rification des types${NC}"
    run_server_type_check
    run_client_type_check
    echo
    
    echo -e "${GREEN}‚úÖ Toutes les op√©rations ont √©t√© ex√©cut√©es avec succ√®s !${NC}"
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${YELLOW}Appuyez sur Entr√©e pour arr√™ter/red√©marrer...${NC}"
    read
    echo -e "${YELLOW}üõë Arr√™t des services...${NC}"
    kill $SERVER_PID 2>/dev/null || true
    kill $CLIENT_PID 2>/dev/null || true
    sleep 2
    echo -e "${GREEN}‚úÖ Les services ont √©t√© arr√™t√©s.${NC}"
}

# Menu principal
show_menu() {
    echo -e "${CYAN}üìã Que voulez-vous faire ?${NC}"
    echo
    echo -e "${PURPLE}0)${NC} üöÄ Ex√©cuter tout (sauf arr√™t)"
    echo -e "${GREEN}1)${NC} üöÄ D√©marrer l'application compl√®te"
    echo -e "${RED}2)${NC} üõë Arr√™ter l'application compl√®te"
    echo -e "${PURPLE}3)${NC} üîÑ Red√©marrer l'application compl√®te"
    echo -e "${BLUE}4)${NC} üîç V√©rifier le statut"
    echo -e "${CYAN}5)${NC} ‚öôÔ∏è  Configurer/Installer (complet)"
    echo -e "${YELLOW}6)${NC} üìã Afficher tous les logs"
    echo -e "${GREEN}7)${NC} üåê Ouvrir dans le navigateur"
    echo -e "${BLUE}8)${NC} üîç Ex√©cuter type-check (complet)"
    echo -e "${YELLOW}9)${NC} üßπ Nettoyer l'environnement"
    echo -e "${YELLOW}28)${NC} üßπ Nettoyer et r√©installer les d√©pendances"
    echo -e "${YELLOW}30)${NC} üîß Fix Next.js chunks (nettoyage complet)"
    echo -e "${RED}23)${NC} üßπ Nettoyage complet forc√©"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Cache Busting ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}32)${NC} üîÑ Configurer Cache Busting"
    echo -e "${BLUE}33)${NC} üß™ Tester Cache Busting"
    echo -e "${PURPLE}34)${NC} üîÑ Mettre √† jour version Cache Busting"
    echo -e "${CYAN}35)${NC} üåê D√©mo Cache Busting"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options d'installation et d√©marrage simple ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}24)${NC} üöÄ Installation compl√®te (setup.sh)"
    echo -e "${GREEN}25)${NC} üöÄ D√©marrage simple (start.sh)"
    echo -e "${RED}26)${NC} üõë Arr√™t simple (stop.sh)"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options sp√©cifiques Serveur ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}10)${NC} üì° D√©marrer uniquement le serveur"
    echo -e "${RED}11)${NC} üõë Arr√™ter uniquement le serveur"
    echo -e "${PURPLE}12)${NC} üîÑ Red√©marrer uniquement le serveur"
    echo -e "${CYAN}13)${NC} ‚öôÔ∏è  Configurer uniquement le serveur"
    echo -e "${BLUE}14)${NC} üìã Logs du serveur uniquement"
    echo -e "${BLUE}15)${NC} üîç Type-check serveur uniquement"
    echo -e "${BLUE}16)${NC} üîç V√©rifier config serveur"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options sp√©cifiques Client ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}17)${NC} üåê D√©marrer uniquement le client"
    echo -e "${RED}18)${NC} üõë Arr√™ter uniquement le client"
    echo -e "${PURPLE}19)${NC} üîÑ Red√©marrer uniquement le client"
    echo -e "${CYAN}20)${NC} ‚öôÔ∏è  Configurer uniquement le client"
    echo -e "${BLUE}21)${NC} üìã Logs du client uniquement"
    echo -e "${BLUE}22)${NC} üîç Type-check client uniquement"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Administration ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}36)${NC} üëë Configurer syst√®me admin"
    echo -e "${GREEN}37)${NC} üë• Cr√©er comptes d√©mo"
    echo -e "${BLUE}38)${NC} üóÑÔ∏è  Initialiser base de donn√©es"
    echo -e "${CYAN}39)${NC} ‚öôÔ∏è  G√©rer environnement"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Monitoring & S√©curit√© ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}40)${NC} üìä Configurer monitoring"
    echo -e "${GREEN}41)${NC} üîí Configurer SSL"
    echo -e "${BLUE}42)${NC} üìã Configurer logrotate"
    echo -e "${BLUE}43)${NC} üìã G√©rer logs"
    echo -e "${PURPLE}44)${NC} üîÑ Red√©marrer services"
    echo -e "${YELLOW}45)${NC} üß™ Test des logs"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options D√©ploiement ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}46)${NC} üöÄ D√©ployer en production"
    echo -e "${GREEN}47)${NC} üöÄ D√©ployer"
    echo -e "${BLUE}48)${NC} üîß Corriger erreurs"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Tests ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}49)${NC} üß™ Test sitemap"
    echo -e "${GREEN}50)${NC} üß™ Tests de stress"
    echo -e "${BLUE}51)${NC} üß™ Tests de charge"
    echo -e "${BLUE}52)${NC} üîç V√©rifier environnement"
    echo -e "${PURPLE}53)${NC} üß™ Test backend complet"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options D√©marrage Rapide ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}54)${NC} üöÄ D√©marrage rapide (quick-start)"
    echo -e "${GREEN}55)${NC} üöÄ D√©marrage dev (start-dev)"
    echo -e "${BLUE}56)${NC} üîß Optimisation performances"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Correction Erreurs ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}57)${NC} üîß Correction toutes erreurs"
    echo -e "${GREEN}58)${NC} üîß Correction erreurs communes"
    echo -e "${BLUE}59)${NC} üîß Correction erreurs 404"
    echo -e "${BLUE}60)${NC} üîß Correction warnings positionnement"
    echo
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options AdonisJS ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}61)${NC} üîß Fusion d√©pendances AdonisJS"
    echo -e "${GREEN}62)${NC} üöÄ Int√©gration parfaite AdonisJS"
    echo -e "${BLUE}63)${NC} üöÄ Int√©gration AdonisJS existant"
    echo -e "${BLUE}64)${NC} üîß Adaptation Express pour AdonisJS"
    echo -e "${PURPLE}65)${NC} üöÄ Configuration AdonisJS hybride"
    echo
    
    # Afficher les scripts d√©tect√©s automatiquement
    show_detected_scripts_menu
    
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ Options Avanc√©es ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${PURPLE}97)${NC} üìã Informations scripts d√©tect√©s"
    echo -e "${PURPLE}98)${NC} üîÑ Rafra√Æchir d√©tection scripts"
    echo -e "${RED}99)${NC} üö™ Quitter"
    echo
    echo -e "${YELLOW}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
}

# Fonction principale
main() {
    clear
    show_logo
    
    # D√©tecter automatiquement les scripts au d√©marrage
    detect_scripts
    
    while true; do
        check_status
        show_menu
        
        read -p "Votre choix (0-99): " choice
        echo
        
        # V√©rifier d'abord si c'est un script d√©tect√©
        if handle_detected_script_choice "$choice"; then
            echo
            read -p "Appuyez sur Entr√©e pour continuer..."
            continue
        fi
        
        case $choice in
            0)
                check_status
                all_scripts
                ;;
            1)
                check_status
                start_server
                start_client
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            2)
                check_status
                stop_server
                stop_client
                ;;
            3)
                check_status
                restart_server
                restart_client
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            4)
                check_status
                ;;
            5)
                check_status
                setup_server
                setup_client
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            6)
                check_status
                show_server_logs
                show_client_logs
                ;;
            7)
                check_status
                open_browser
                ;;
            8)
                check_status
                run_server_type_check
                run_client_type_check
                ;;
            9)
                check_status
                clean_env
                ;;
            10)
                check_status
                start_server
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            11)
                check_status
                stop_server
                ;;
            12)
                check_status
                restart_server
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            13)
                check_status
                setup_server
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            14)
                check_status
                show_server_logs
                ;;
            15)
                check_status
                run_server_type_check
                ;;
            16)
                check_status
                check_server_config
                ;;
            17)
                check_status
                start_client
                ;;
            18)
                check_status
                stop_client
                ;;
            19)
                check_status
                restart_client
                ;;
            20)
                check_status
                setup_client
                ;;
            21)
                check_status
                show_client_logs
                ;;
            22)
                check_status
                run_client_type_check
                ;;
            23)
                check_status
                clean_environment
                ;;
            24)
                check_status
                install_app
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            25)
                check_status
                simple_start
                # V√©rification automatique
                check_backend_running
                check_login_route
                ;;
            26)
                check_status
                simple_stop
                ;;
            28)
                check_status
                clean_dependencies
                ;;
            30)
                check_status
                fix_nextjs_chunks
                ;;
            32)
                check_status
                setup_cache_busting
                ;;
            33)
                check_status
                test_cache_busting
                ;;
            34)
                check_status
                update_cache_busting_version
                ;;
            35)
                check_status
                open_cache_busting_demo
                ;;
            36)
                check_status
                setup_admin_system
                ;;
            37)
                check_status
                create_demo_accounts
                ;;
            38)
                check_status
                init_database
                ;;
            39)
                check_status
                manage_env
                ;;
            40)
                check_status
                setup_monitoring
                ;;
            41)
                check_status
                setup_ssl
                ;;
            42)
                check_status
                setup_logrotate
                ;;
            43)
                check_status
                manage_logs
                ;;
            44)
                check_status
                restart_services
                ;;
            45)
                check_status
                test_logs
                ;;
            46)
                check_status
                deploy_production
                ;;
            47)
                check_status
                deploy
                ;;
            48)
                check_status
                fix_errors
                ;;
            49)
                check_status
                test_sitemap
                ;;
            50)
                check_status
                run_stress_test
                ;;
            51)
                check_status
                run_load_test
                ;;
            52)
                check_status
                check_environment
                ;;
            53)
                check_status
                test_backend
                ;;
            54)
                check_status
                quick_start_script
                ;;
            55)
                check_status
                start_dev_script
                ;;
            56)
                check_status
                optimize_performance_script
                ;;
            57)
                check_status
                fix_all_errors_script
                ;;
            58)
                check_status
                fix_common_issues_script
                ;;
            59)
                check_status
                fix_404_errors_script
                ;;
            60)
                check_status
                fix_positioning_warnings_script
                ;;
            61)
                check_status
                merge_adonisjs_deps_script
                ;;
            62)
                check_status
                integrate_adonisjs_perfect_script
                ;;
            63)
                check_status
                integrate_adonisjs_existing_script
                ;;
            64)
                check_status
                adapt_express_for_adonisjs_script
                ;;
            65)
                check_status
                setup_adonisjs_hybrid_script
                ;;
            97)
                check_status
                echo -e "${CYAN}üìã Affichage des informations des scripts d√©tect√©s...${NC}"
                if [ ${#DETECTED_SCRIPTS[@]} -eq 0 ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  Aucun script d√©tect√©${NC}"
                else
                    for i in "${!SCRIPT_OPTIONS[@]}"; do
                        local script_name="${SCRIPT_OPTIONS[$i]}"
                        show_script_info "$script_name"
                    done
                fi
                ;;
            98)
                check_status
                echo -e "${CYAN}üîÑ Rafra√Æchissement de la d√©tection des scripts...${NC}"
                detect_scripts
                echo -e "${GREEN}‚úÖ D√©tection des scripts rafra√Æchie${NC}"
                ;;
            99)
                echo -e "${GREEN}üëã Au revoir !${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Option invalide. Veuillez choisir entre 0 et 99.${NC}"
                ;;
        esac
        
        echo
        echo -e "${YELLOW}Appuyez sur Entr√©e pour red√©marrer...${NC}"
        read
        clear
        show_logo
    done
}

# Fonction pour v√©rifier et corriger la configuration du serveur
check_server_config() {
    echo -e "${BLUE}üîç V√©rification de la configuration du serveur...${NC}"
    
    # V√©rifier la configuration .env unifi√©e
    check_env_config
    
    if [ -d "server" ]; then
        cd server
        
        # V√©rifier les d√©pendances
        if [ ! -d "node_modules" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances manquantes, installation...${NC}"
            npm install
        else
            echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
        fi
        
        # V√©rifier la base de donn√©es
        if [ ! -f "dev.db" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Base de donn√©es manquante, cr√©ation...${NC}"
            npm run db:generate
            npm run db:push
            npm run db:seed
        else
            echo -e "${GREEN}‚úÖ Base de donn√©es pr√©sente${NC}"
        fi
        
        cd ..
        echo -e "${GREEN}‚úÖ Configuration du serveur v√©rifi√©e${NC}"
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
    fi
}

# === D√âBUT DES SCRIPTS FUSIONN√âS ===

# Script: manage-env.sh
manage_env_script() {
    echo "‚öôÔ∏è  Gestion de l'environnement..."
    
    # V√©rifier que nous sommes √† la racine du projet
    if [ ! -f "package.json" ]; then
        echo -e "${RED}‚ùå Ce script doit √™tre ex√©cut√© depuis la racine du projet ADS${NC}"
        return 1
    fi
    
    echo -e "${BLUE}üìã Fichiers .env d√©tect√©s:${NC}"
    ls -la .env* 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Aucun fichier .env trouv√©${NC}"
    
    # Cr√©er le fichier .env s'il n'existe pas
    if [ ! -f ".env" ]; then
        echo -e "${BLUE}üìù Cr√©ation du fichier .env...${NC}"
        
        # Essayer de copier depuis .env.development en priorit√©
        if [ -f ".env.development" ]; then
            cp .env.development .env
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√© √† partir de .env.development${NC}"
        elif [ -f ".env.local" ]; then
            cp .env.local .env
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√© √† partir de .env.local${NC}"
        elif [ -f ".env.production" ]; then
            cp .env.production .env
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√© √† partir de .env.production${NC}"
        else
            # Cr√©er un fichier .env minimal
            cat > .env << 'EOF'
# Configuration ADS SaaS
NODE_ENV=development
PORT=8000
DATABASE_URL="file:./dev.db"
JWT_SECRET="ads-saas-secret-key-change-in-production-32-chars-min"
JWT_REFRESH_SECRET="ads-saas-refresh-secret-change-in-production-32"
FRONTEND_URL="http://localhost:3000"
NEXT_PUBLIC_API_URL="http://localhost:8000"
EOF
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√© avec configuration minimale${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env existe d√©j√†${NC}"
    fi
    
    # V√©rifier les variables importantes
    echo -e "${BLUE}üîç V√©rification des variables d'environnement...${NC}"
    source .env 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è  Impossible de charger le fichier .env${NC}"
    
    if [ -z "$JWT_SECRET" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  JWT_SECRET non d√©fini${NC}"
    else
        echo -e "${GREEN}‚úÖ JWT_SECRET d√©fini${NC}"
    fi
    
    if [ -z "$DATABASE_URL" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  DATABASE_URL non d√©fini${NC}"
    else
        echo -e "${GREEN}‚úÖ DATABASE_URL d√©fini${NC}"
    fi
    
    if [ -z "$PORT" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  PORT non d√©fini${NC}"
    else
        echo -e "${GREEN}‚úÖ PORT d√©fini: $PORT${NC}"
    fi
    
    # V√©rifier la coh√©rence avec le serveur
    if [ -f "server/.env" ]; then
        echo -e "${BLUE}üîç V√©rification de la coh√©rence avec server/.env...${NC}"
        if [ -f ".env" ] && [ -f "server/.env" ]; then
            # Comparer les variables importantes
            source .env
            source server/.env
            if [ "$DATABASE_URL" != "$SERVER_DATABASE_URL" ] 2>/dev/null; then
                echo -e "${YELLOW}‚ö†Ô∏è  DATABASE_URL diff√©rent entre .env et server/.env${NC}"
            else
                echo -e "${GREEN}‚úÖ Configuration coh√©rente entre .env et server/.env${NC}"
            fi
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Gestion de l'environnement termin√©e${NC}"
}

# Script: init-database.sh
init_database_script() {
    echo "üóÑÔ∏è  Initialisation de la base de donn√©es SQLite pour ADS SaaS..."
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
        exit 1
    fi
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        error "Node.js n'est pas install√©"
        exit 1
    fi
    
    log "Node.js d√©tect√©: $(node --version)"
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        error "npm n'est pas install√©"
        exit 1
    fi
    
    log "npm d√©tect√©: $(npm --version)"
    
    # Aller dans le r√©pertoire server
    cd server
    
    log "Configuration de la base de donn√©es SQLite..."
    
    # Installer les d√©pendances si n√©cessaire
    if [ ! -d "node_modules" ]; then
        info "Installation des d√©pendances serveur..."
        npm install
    fi
    
    # V√©rifier que Prisma est install√©
    if ! npx prisma --version > /dev/null 2>&1; then
        error "Prisma n'est pas install√©"
        exit 1
    fi
    
    log "Prisma d√©tect√©: $(npx prisma --version)"
    
    # Utiliser les fonctions de correction intelligente
    check_and_fix_prisma_schema
    fix_seed_script
    
    # Supprimer la base de donn√©es existante si elle existe
    if [ -f "dev.db" ]; then
        warn "Base de donn√©es existante d√©tect√©e, elle va √™tre supprim√©e pour √©viter les conflits de migration."
        rm -f dev.db
        log "Ancienne base de donn√©es supprim√©e"
    fi
    
    # Supprimer les migrations existantes pour repartir de z√©ro
    if [ -d "prisma/migrations" ]; then
        warn "Migrations existantes d√©tect√©es, suppression..."
        rm -rf prisma/migrations
        log "Anciennes migrations supprim√©es"
    fi
    
    # Supprimer le fichier de verrouillage des migrations
    if [ -f "prisma/migration_lock.toml" ]; then
        rm -f prisma/migration_lock.toml
        log "Fichier de verrouillage des migrations supprim√©"
    fi
    
    # G√©n√©rer le client Prisma
    info "G√©n√©ration du client Prisma..."
    npx prisma generate
    
    # Cr√©er la base de donn√©es SQLite avec push (√©vite les probl√®mes de migration)
    info "Cr√©ation de la base de donn√©es SQLite..."
    npx prisma db push --force-reset
    
    log "Base de donn√©es SQLite cr√©√©e"
    
    # Seeder la base de donn√©es avec des donn√©es de d√©monstration
    info "Ajout des donn√©es de d√©monstration..."
    
    # Utiliser le script de seeding corrig√©
    if [ -f "scripts/seed-test-data.js" ]; then
        node scripts/seed-test-data.js
    else
        # Fallback vers l'ancien script si le nouveau n'existe pas
        cat > seed-demo.js << 'EOF'
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function seedDatabase() {
  try {
    console.log('üå± Ajout des donn√©es de d√©monstration...');

    // Cr√©er l'utilisateur administrateur
    const adminPassword = await bcrypt.hash('admin123', 10);
    const adminUser = await prisma.user.upsert({
      where: { email: 'admin@ads-saas.com' },
      update: {},
      create: {
          email: 'admin@ads-saas.com',
          password: adminPassword,
          firstName: 'Admin',
          lastName: 'ADS SaaS',
          role: 'ADMIN',
          emailVerified: true,
          twoFactorEnabled: false
        }
    });

    console.log('‚úÖ Utilisateur administrateur cr√©√©');

    // Cr√©er l'utilisateur d√©mo
    const demoPassword = await bcrypt.hash('demo123', 10);
    const demoUser = await prisma.user.upsert({
      where: { email: 'demo@ads-saas.com' },
      update: {},
      create: {
          email: 'demo@ads-saas.com',
          password: demoPassword,
          firstName: 'Utilisateur',
          lastName: 'D√©mo',
          role: 'USER',
          emailVerified: true,
          twoFactorEnabled: false
        }
    });

    console.log('‚úÖ Utilisateur d√©mo cr√©√©');

    // Cr√©er quelques campagnes de d√©monstration
    if (demoUser) {
      // Campagne d√©mo 1
      await prisma.campaign.upsert({
        where: { id: 'demo-campaign-1' },
        update: {},
        create: {
          id: 'demo-campaign-1',
          name: 'Campagne D√©mo - Produits Tech',
          description: 'Campagne de d√©monstration pour les produits technologiques',
          status: 'ACTIVE',
          budget: 1000.0,
          spent: 250.75,
          impressions: 15420,
          clicks: 847,
          conversions: 23,
          startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
          endDate: new Date(Date.now() + 23 * 24 * 60 * 60 * 1000),
          userId: demoUser.id
        }
      });

      // Campagne d√©mo 2
      await prisma.campaign.upsert({
        where: { id: 'demo-campaign-2' },
        update: {},
        create: {
          id: 'demo-campaign-2',
          name: 'Campagne D√©mo - Services',
          description: 'Campagne de d√©monstration pour les services en ligne',
          status: 'PAUSED',
          budget: 500.0,
          spent: 89.50,
          impressions: 5230,
          clicks: 312,
          conversions: 8,
          startDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000),
          endDate: new Date(Date.now() + 16 * 24 * 60 * 60 * 1000),
          userId: demoUser.id
        }
      });

      console.log('‚úÖ Campagnes de d√©monstration cr√©√©es');
    }

    console.log('üéâ Base de donn√©es initialis√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

seedDatabase();
EOF
        node seed-demo.js
        rm seed-demo.js
    fi
    
    # Retourner √† la racine
    cd ..
    
    log "‚úÖ Base de donn√©es SQLite initialis√©e avec succ√®s !"
    echo
    echo "üìã R√©capitulatif:"
    echo "   ‚úÖ Base de donn√©es SQLite cr√©√©e"
    echo "   ‚úÖ Utilisateur administrateur cr√©√©"
    echo "   ‚úÖ Utilisateur d√©mo cr√©√©"
    echo "   ‚úÖ Campagnes de d√©monstration ajout√©es"
    echo "   ‚úÖ D√©pendances install√©es"
    echo
    echo "üîë Identifiants d'acc√®s:"
    echo "   üë§ Admin: admin@ads-saas.com / admin123"
    echo "   üë§ D√©mo:  demo@ads-saas.com / demo123"
    echo
    echo "üåê URLs d'acc√®s:"
    echo "   üè† Application: http://localhost:3000"
    echo "   üîß Admin: http://localhost:3000/admin/login"
    echo "   üìä API: http://localhost:8000"
    echo
    echo "üóÑÔ∏è  Base de donn√©es:"
    echo "   - Fichier: server/dev.db"
    echo "   - Type: SQLite"
    echo "   - Taille: $(ls -lh server/dev.db 2>/dev/null | awk '{print $5}' || echo 'N/A')"
    echo
    echo "üöÄ Pour d√©marrer le syst√®me:"
    echo "   ./run.sh start"
    echo
    log "Base de donn√©es pr√™te √† l'emploi !"
}

# Script: setup-admin-system.sh
setup_admin_system_script() {
    echo "üëë Configuration du syst√®me d'administration..."
    
    if [ -f "scripts/setup-admin-system.sh" ]; then
        chmod +x scripts/setup-admin-system.sh
        ./scripts/setup-admin-system.sh
    else
        echo -e "${RED}‚ùå Script setup-admin-system.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Script: create-demo-accounts.sh
create_demo_accounts_script() {
    echo "üë• Cr√©ation des comptes de d√©monstration..."
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
        return 1
    fi
    
    # Aller dans le r√©pertoire server
    cd server
    
    log "Cr√©ation des comptes de d√©monstration via Prisma..."
    
    # Cr√©er un script de cr√©ation de comptes d√©mo
    cat > create-demo-accounts.js << 'EOF'
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createDemoAccounts() {
  try {
    console.log('üë• Cr√©ation des comptes de d√©monstration...');

    // Cr√©er l'utilisateur d√©mo principal
    const demoPassword = await bcrypt.hash('Demo123456!', 10);
    const demoUser = await prisma.user.upsert({
      where: { email: 'demo@ads-saas.com' },
      update: {},
      create: {
        email: 'demo@ads-saas.com',
        password: demoPassword,
        firstName: 'Utilisateur',
        lastName: 'D√©mo',
        role: 'USER',
        emailVerified: true,
        twoFactorEnabled: false
      }
    });

    console.log('‚úÖ Utilisateur d√©mo principal cr√©√©');

    // Cr√©er quelques utilisateurs de test suppl√©mentaires
    const testUsers = [
      { email: 'john.doe@example.com', firstName: 'John', lastName: 'Doe' },
      { email: 'jane.smith@example.com', firstName: 'Jane', lastName: 'Smith' },
      { email: 'mike.wilson@example.com', firstName: 'Mike', lastName: 'Wilson' }
    ];

    for (const userData of testUsers) {
      const password = await bcrypt.hash('Password123!', 10);
      await prisma.user.upsert({
        where: { email: userData.email },
        update: {},
        create: {
          email: userData.email,
          password: password,
          firstName: userData.firstName,
          lastName: userData.lastName,
          role: 'USER',
          emailVerified: true,
          twoFactorEnabled: false
        }
      });
      console.log(`‚úÖ Utilisateur cr√©√©: ${userData.email}`);
    }

    // Cr√©er quelques campagnes de d√©monstration
    if (demoUser) {
      const campaigns = [
        {
          name: 'Campagne D√©mo - Produits Tech',
          description: 'Campagne de d√©monstration pour les produits technologiques',
          status: 'ACTIVE',
          budget: 1000.0,
          spent: 250.75,
          impressions: 15420,
          clicks: 847,
          conversions: 23
        },
        {
          name: 'Campagne D√©mo - Services',
          description: 'Campagne de d√©monstration pour les services en ligne',
          status: 'PAUSED',
          budget: 500.0,
          spent: 89.50,
          impressions: 5230,
          clicks: 312,
          conversions: 8
        }
      ];

      for (const campaignData of campaigns) {
        await prisma.campaign.upsert({
          where: { id: `demo-${Date.now()}-${Math.random().toString(36).substr(2, 9)}` },
          update: {},
          create: {
            ...campaignData,
            startDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
            endDate: new Date(Date.now() + 23 * 24 * 60 * 60 * 1000),
            userId: demoUser.id
          }
        });
      }
      console.log('‚úÖ Campagnes de d√©monstration cr√©√©es');
    }

    console.log('üéâ Comptes de d√©monstration cr√©√©s avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des comptes:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

createDemoAccounts();
EOF

    # Ex√©cuter le script
    node create-demo-accounts.js
    
    # Nettoyer le script temporaire
    rm create-demo-accounts.js
    
    # Retourner √† la racine
    cd ..
    
    log "‚úÖ Comptes de d√©monstration cr√©√©s avec succ√®s !"
    echo
    echo "üîë Identifiants de d√©monstration:"
    echo "   üë§ D√©mo: demo@ads-saas.com / Demo123456!"
    echo "   üë§ Test: john.doe@example.com / Password123!"
    echo "   üë§ Test: jane.smith@example.com / Password123!"
    echo "   üë§ Test: mike.wilson@example.com / Password123!"
    echo
}

# Script: setup-monitoring.sh
setup_monitoring_script() {
    echo "üìä Configuration du monitoring..."
    
    if [ -f "scripts/setup-monitoring.sh" ]; then
        chmod +x scripts/setup-monitoring.sh
        ./scripts/setup-monitoring.sh
    else
        echo -e "${RED}‚ùå Script setup-monitoring.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Script: setup-ssl.sh
setup_ssl_script() {
    echo "üîí Configuration SSL..."
    
    if [ -f "scripts/setup-ssl.sh" ]; then
        chmod +x scripts/setup-ssl.sh
        ./scripts/setup-ssl.sh
    else
        echo -e "${RED}‚ùå Script setup-ssl.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Script: setup-cache-busting.sh
setup_cache_busting_script() {
    echo "üîÑ Configuration du Cache Busting..."
    
    if [ -f "scripts/setup-cache-busting.sh" ]; then
        chmod +x scripts/setup-cache-busting.sh
        ./scripts/setup-cache-busting.sh
    else
        echo -e "${RED}‚ùå Script setup-cache-busting.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Script: fix-errors.sh
fix_errors_script() {
    echo "üîß Diagnostic et correction des erreurs..."
    
    if [ -f "scripts/fix-errors.sh" ]; then
        chmod +x scripts/fix-errors.sh
        ./scripts/fix-errors.sh
    else
        echo -e "${RED}‚ùå Script fix-errors.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Script: restart-services.sh
restart_services_script() {
    echo "üîÑ Red√©marrage des services..."
    
    if [ -f "scripts/restart-services.sh" ]; then
        chmod +x scripts/restart-services.sh
        ./scripts/restart-services.sh
    else
        echo -e "${RED}‚ùå Script restart-services.sh non trouv√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez que le script existe dans le dossier scripts/${NC}"
    fi
}

# Fonction pour tout ex√©cuter dans l'ordre logique
all_scripts() {
    log "Ex√©cution de l'automatisation compl√®te (ALL) :"
    
    # 1. Configuration de base
    log "üìã √âtape 1/8: Configuration de l'environnement"
    manage_env_script
    
    # 2. Initialisation de la base de donn√©es
    log "üìã √âtape 2/8: Initialisation de la base de donn√©es"
    init_database_script
    
    # 3. Configuration du syst√®me d'administration
    log "üìã √âtape 3/8: Configuration du syst√®me d'administration"
    setup_admin_system_script
    
    # 4. Configuration du monitoring
    log "üìã √âtape 4/8: Configuration du monitoring"
    setup_monitoring_script
    
    # 5. Configuration SSL
    log "üìã √âtape 5/8: Configuration SSL"
    setup_ssl_script
    
    # 6. Configuration du cache busting
    log "üìã √âtape 6/8: Configuration du cache busting"
    setup_cache_busting_script
    
    # 7. Correction des erreurs
    log "üìã √âtape 7/8: Correction des erreurs"
    fix_errors_script
    
    # 8. Red√©marrage des services
    log "üìã √âtape 8/8: Red√©marrage des services"
    restart_services_script
    
    log "üéâ Automatisation compl√®te termin√©e !"
    log "üöÄ Pour d√©marrer l'application: ./run.sh start"
    
    echo
    echo -e "${YELLOW}Appuyez sur Entr√©e pour arr√™ter/red√©marrer...${NC}"
    read
    echo -e "${YELLOW}üõë Arr√™t des services...${NC}"
    stop_app
    sleep 2
    echo -e "${GREEN}‚úÖ Les services ont √©t√© arr√™t√©s.${NC}"
}

# === FONCTIONS POUR LES SCRIPTS MANQUANTS ===

# Script: quick-start.sh
quick_start_script() {
    echo "üöÄ D√©marrage rapide de ADS SaaS optimis√©..."
    
    # V√©rifier les pr√©requis
    echo -e "${BLUE}‚ÑπÔ∏è  V√©rification des pr√©requis...${NC}"
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n'est pas install√©${NC}"
        return 1
    fi
    
    # V√©rifier npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm n'est pas install√©${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis v√©rifi√©s${NC}"
    
    # 1. D√âMARRER REDIS
    echo -e "${BLUE}1. D√©marrage de Redis...${NC}"
    
    if ! pgrep -x "redis-server" > /dev/null; then
        if command -v redis-server &> /dev/null; then
            redis-server --daemonize yes
            sleep 2
            echo -e "${GREEN}‚úÖ Redis d√©marr√©${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Redis non install√© - le cache sera d√©sactiv√©${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Redis d√©j√† en cours d'ex√©cution${NC}"
    fi
    
    # 2. PR√âPARER LA BASE DE DONN√âES
    echo -e "${BLUE}2. Pr√©paration de la base de donn√©es...${NC}"
    
    cd server
    
    # G√©n√©rer le client Prisma
    npx prisma generate
    
    # Appliquer les migrations
    npx prisma db push
    
    # Cr√©er un utilisateur de test si n√©cessaire
    if ! npx prisma db execute --stdin <<< "SELECT COUNT(*) as count FROM users;" | grep -q "1"; then
        echo -e "${BLUE}   Cr√©ation d'un utilisateur de test...${NC}"
        node -e "
        const { PrismaClient } = require('@prisma/client');
        const bcrypt = require('bcryptjs');
        
        const prisma = new PrismaClient();
        
        async function createTestUser() {
            try {
                const hashedPassword = await bcrypt.hash('password123', 12);
                
                const user = await prisma.user.create({
                    data: {
                        email: 'admin@ads-saas.com',
                        password: hashedPassword,
                        firstName: 'Admin',
                        lastName: 'Test',
                        role: 'ADMIN',
                        status: 'ACTIVE'
                    }
                });
                
                await prisma.subscription.create({
                    data: {
                        userId: user.id,
                        plan: 'PRO',
                        status: 'ACTIVE'
                    }
                });
                
                console.log('‚úÖ Utilisateur de test cr√©√©: admin@ads-saas.com / password123');
            } catch (error) {
                console.log('Utilisateur de test d√©j√† existant');
            } finally {
                await prisma.\$disconnect();
            }
        }
        
        createTestUser();
        "
    fi
    
    cd ..
    
    # 3. D√âMARRER LE BACKEND
    echo -e "${BLUE}3. D√©marrage du backend...${NC}"
    
    cd server
    
    # Installer les d√©pendances si n√©cessaire
    if [ ! -d "node_modules" ]; then
        echo -e "${BLUE}   Installation des d√©pendances backend...${NC}"
        npm install
    fi
    
    # D√©marrer le serveur backend
    echo -e "${BLUE}   D√©marrage du serveur backend...${NC}"
    npm run dev &
    BACKEND_PID=$!
    
    cd ..
    
    # 4. D√âMARRER LE FRONTEND
    echo -e "${BLUE}4. D√©marrage du frontend...${NC}"
    
    cd client
    
    # Installer les d√©pendances si n√©cessaire
    if [ ! -d "node_modules" ]; then
        echo -e "${BLUE}   Installation des d√©pendances frontend...${NC}"
        npm install
    fi
    
    # D√©marrer le serveur frontend
    echo -e "${BLUE}   D√©marrage du serveur frontend...${NC}"
    npm run dev &
    FRONTEND_PID=$!
    
    cd ..
    
    # 5. ATTENDRE LE D√âMARRAGE
    echo -e "${BLUE}5. Attente du d√©marrage des services...${NC}"
    
    sleep 10
    
    # 6. TESTS DE CONNECTIVIT√â
    echo -e "${BLUE}6. Tests de connectivit√©...${NC}"
    
    # Test backend
    if curl -s http://localhost:8000/health > /dev/null; then
        echo -e "${GREEN}‚úÖ Backend accessible sur http://localhost:8000${NC}"
    else
        echo -e "${RED}‚ùå Backend non accessible${NC}"
    fi
    
    # Test frontend
    if curl -s http://localhost:3000 > /dev/null; then
        echo -e "${GREEN}‚úÖ Frontend accessible sur http://localhost:3000${NC}"
    else
        echo -e "${RED}‚ùå Frontend non accessible${NC}"
    fi
    
    # Test Redis
    if command -v redis-cli &> /dev/null && redis-cli ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Redis fonctionnel${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Redis non accessible${NC}"
    fi
    
    # 7. AFFICHER LES INFORMATIONS
    echo ""
    echo -e "${GREEN}üéâ ADS SaaS d√©marr√© avec succ√®s!${NC}"
    echo ""
    echo -e "${CYAN}üìä Services disponibles:${NC}"
    echo "   - Frontend: http://localhost:3000"
    echo "   - Backend API: http://localhost:8000"
    echo "   - Health Check: http://localhost:8000/health"
    echo ""
    echo -e "${CYAN}üîê Compte de test:${NC}"
    echo "   - Email: admin@ads-saas.com"
    echo "   - Mot de passe: password123"
    echo ""
}

# Script: optimize-performance.sh
optimize_performance_script() {
    echo "üîß Optimisation automatique des performances pour ADS..."
    
    # Fonction d'optimisation de la base de donn√©es
    optimize_database() {
        echo -e "${BLUE}üîß Optimisation de la base de donn√©es...${NC}"
        
        cd server
        
        # G√©n√©rer le client Prisma avec les nouveaux index
        echo -e "${BLUE}G√©n√©ration du client Prisma...${NC}"
        npx prisma generate
        
        # Appliquer les migrations
        echo -e "${BLUE}Application des migrations...${NC}"
        npx prisma migrate deploy
        
        # Optimiser la base de donn√©es SQLite
        echo -e "${BLUE}Optimisation SQLite...${NC}"
        npx prisma db execute --stdin <<< "
            PRAGMA optimize;
            VACUUM;
            ANALYZE;
        "
        
        cd ..
        echo -e "${GREEN}‚úÖ Base de donn√©es optimis√©e${NC}"
    }
    
    # Fonction d'optimisation du cache Redis
    optimize_cache() {
        echo -e "${BLUE}üîß Optimisation du cache Redis...${NC}"
        
        # V√©rifier si Redis est en cours d'ex√©cution
        if ! pgrep -x "redis-server" > /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Redis n'est pas en cours d'ex√©cution. D√©marrage...${NC}"
            redis-server --daemonize yes
            sleep 2
        fi
        
        # Nettoyer le cache
        redis-cli FLUSHDB
        
        # Configurer Redis pour les performances
        redis-cli CONFIG SET maxmemory-policy allkeys-lru
        redis-cli CONFIG SET save ""
        redis-cli CONFIG SET appendonly no
        
        echo -e "${GREEN}‚úÖ Cache Redis optimis√©${NC}"
    }
    
    # Fonction d'optimisation du frontend
    optimize_frontend() {
        echo -e "${BLUE}üîß Optimisation du frontend...${NC}"
        
        cd client
        
        # Nettoyer les caches
        echo -e "${BLUE}Nettoyage des caches...${NC}"
        rm -rf .next
        rm -rf node_modules/.cache
        
        # Optimiser les d√©pendances
        echo -e "${BLUE}Optimisation des d√©pendances...${NC}"
        npm ci --production=false
        
        # Build optimis√©
        echo -e "${BLUE}Build optimis√©...${NC}"
        npm run build
        
        cd ..
        echo -e "${GREEN}‚úÖ Frontend optimis√©${NC}"
    }
    
    # Fonction d'optimisation du backend
    optimize_backend() {
        echo -e "${BLUE}üîß Optimisation du backend...${NC}"
        
        cd server
        
        # Nettoyer les caches
        echo -e "${BLUE}Nettoyage des caches...${NC}"
        rm -rf node_modules/.cache
        rm -rf tmp/*
        
        # Optimiser les d√©pendances
        echo -e "${BLUE}Optimisation des d√©pendances...${NC}"
        npm ci --production=false
        
        # V√©rifier la configuration
        echo -e "${BLUE}V√©rification de la configuration...${NC}"
        node -c src/index.ts
        
        cd ..
        echo -e "${GREEN}‚úÖ Backend optimis√©${NC}"
    }
    
    # Fonction d'optimisation syst√®me
    optimize_system() {
        echo -e "${BLUE}üîß Optimisation syst√®me...${NC}"
        
        # V√©rifier l'espace disque
        DISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
        if [ "$DISK_USAGE" -gt 90 ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Espace disque faible: ${DISK_USAGE}%${NC}"
            echo -e "${BLUE}Nettoyage des fichiers temporaires...${NC}"
            find . -name "*.tmp" -delete
            find . -name "*.log" -size +100M -delete
        fi
        
        # Optimiser la m√©moire
        if command -v sysctl &> /dev/null; then
            echo -e "${BLUE}Optimisation de la m√©moire...${NC}"
            sudo sysctl -w vm.swappiness=10
        fi
        
        echo -e "${GREEN}‚úÖ Syst√®me optimis√©${NC}"
    }
    
    # Fonction de test de performance
    test_performance() {
        echo -e "${BLUE}üß™ Test de performance...${NC}"
        
        # Test de la base de donn√©es
        echo -e "${BLUE}Test de la base de donn√©es...${NC}"
        cd server
        npx prisma db execute --stdin <<< "
            SELECT COUNT(*) as user_count FROM users;
            SELECT COUNT(*) as campaign_count FROM campaigns;
        "
        cd ..
        
        # Test de Redis
        echo -e "${BLUE}Test de Redis...${NC}"
        redis-cli ping
        redis-cli info memory | grep used_memory_human
        
        # Test du serveur
        echo -e "${BLUE}Test du serveur...${NC}"
        if curl -s http://localhost:8000/health > /dev/null; then
            echo -e "${GREEN}‚úÖ Serveur accessible${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Serveur non accessible sur le port 8000${NC}"
        fi
        
        # Test du frontend
        echo -e "${BLUE}Test du frontend...${NC}"
        if curl -s http://localhost:3000 > /dev/null; then
            echo -e "${GREEN}‚úÖ Frontend accessible${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Frontend non accessible sur le port 3000${NC}"
        fi
        
        echo -e "${GREEN}‚úÖ Tests de performance termin√©s${NC}"
    }
    
    # Ex√©cuter les optimisations
    optimize_database
    optimize_cache
    optimize_frontend
    optimize_backend
    optimize_system
    test_performance
    
    echo -e "${GREEN}üéâ Optimisation des performances termin√©e !${NC}"
}

# Script: fix-all-errors.sh
fix_all_errors_script() {
    echo "üöÄ Correction compl√®te des erreurs 404 et warnings..."
    echo "===================================================="
    
    # Corriger les erreurs 404
    fix_404_errors() {
        echo -e "${PURPLE}üîß Correction des erreurs 404...${NC}"
        
        # 1. V√©rifier la route API placeholder
        if [ ! -f "client/src/app/api/placeholder/[...size]/route.ts" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Cr√©ation de la route API placeholder...${NC}"
            mkdir -p "client/src/app/api/placeholder/[...size]"
            cat > "client/src/app/api/placeholder/[...size]/route.ts" << 'EOF'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(
  request: NextRequest,
  { params }: { params: { size: string[] } }
) {
  try {
    // G√©rer le format "40/40" ou "300/200"
    const sizeParam = params.size.join('/')
    const [width, height] = sizeParam.split('/').map(Number)
    
    if (!width || !height || width > 1000 || height > 1000) {
      return new NextResponse('Invalid size', { status: 400 })
    }

    // G√©n√©rer une image SVG placeholder
    const svg = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
        </defs>
        <rect width="100%" height="100%" fill="url(#grad)"/>
        <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="${Math.min(width, height) / 8}" 
              fill="white" text-anchor="middle" dy=".3em">
          ${width}√ó${height}
        </text>
      </svg>
    `

    return new NextResponse(svg, {
      headers: {
        'Content-Type': 'image/svg+xml',
        'Cache-Control': 'public, max-age=31536000, immutable',
      },
    })
  } catch (error) {
    console.error('Erreur g√©n√©ration placeholder:', error)
    return new NextResponse('Internal Server Error', { status: 500 })
  }
}
EOF
            echo -e "${GREEN}‚úÖ Route API placeholder cr√©√©e${NC}"
        else
            echo -e "${GREEN}‚úÖ Route API placeholder existe d√©j√†${NC}"
        fi
        
        # 2. V√©rifier la configuration Next.js
        if [ -f "client/next.config.js" ]; then
            if ! grep -q "images:" "client/next.config.js"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Ajout de la configuration images dans next.config.js...${NC}"
                # Ajouter la configuration images si elle n'existe pas
                sed -i.bak '/module.exports = {/a\
  images: {\
    domains: ["localhost", "127.0.0.1"],\
    unoptimized: true\
  },' "client/next.config.js"
                echo -e "${GREEN}‚úÖ Configuration images ajout√©e${NC}"
            else
                echo -e "${GREEN}‚úÖ Configuration images d√©j√† pr√©sente${NC}"
            fi
        fi
    }
    
    # Corriger les warnings de positionnement
    fix_positioning_warnings() {
        echo -e "${PURPLE}üîß Correction des warnings de positionnement...${NC}"
        
        # 1. Corriger le builder visuel
        if [ -f "client/src/lib/visual-page-builder.tsx" ]; then
            echo -e "${BLUE}Correction du builder visuel...${NC}"
            
            # V√©rifier si le conteneur principal a une position relative
            if ! grep -q "className=\"h-full flex bg-gray-100 relative\"" "client/src/lib/visual-page-builder.tsx"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Ajout de la position relative au conteneur principal...${NC}"
                sed -i.bak 's/className="h-full flex bg-gray-100"/className="h-full flex bg-gray-100 relative"/' "client/src/lib/visual-page-builder.tsx"
                echo -e "${GREEN}‚úÖ Position relative ajout√©e au builder visuel${NC}"
            else
                echo -e "${GREEN}‚úÖ Builder visuel d√©j√† corrig√©${NC}"
            fi
            
            # Corriger les ic√¥nes Heroicons
            if grep -q "style: { marginRight: '8px', color: '#9ca3af' }" "client/src/lib/visual-page-builder.tsx"; then
                echo -e "${YELLOW}‚ö†Ô∏è  Correction des ic√¥nes Heroicons...${NC}"
                sed -i.bak "s/style: { marginRight: '8px', color: '#9ca3af' }/className: \"mr-2 text-gray-400\"/" "client/src/lib/visual-page-builder.tsx"
                echo -e "${GREEN}‚úÖ Ic√¥nes Heroicons corrig√©es${NC}"
            fi
        fi
        
        # 2. Cr√©er la configuration Framer Motion
        if [ ! -f "client/src/lib/framer-motion-config.ts" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Cr√©ation de la configuration Framer Motion...${NC}"
            cat > "client/src/lib/framer-motion-config.ts" << 'EOF'
import React from 'react'

// Configuration pour √©viter les warnings de positionnement
export const framerMotionConfig = {
  // Configuration pour les animations de scroll
  scroll: {
    // S'assurer que les conteneurs ont une position relative
    containerProps: {
      style: { position: 'relative' }
    }
  },
  
  // Configuration pour les transitions
  transition: {
    type: "spring",
    stiffness: 100,
    damping: 20
  }
}

// Hook personnalis√© pour les animations de scroll
export const useSafeScroll = (target?: React.RefObject<HTMLElement>) => {
  // S'assurer que le conteneur a une position relative
  React.useEffect(() => {
    if (target?.current) {
      const computedStyle = window.getComputedStyle(target.current)
      if (computedStyle.position === 'static') {
        target.current.style.position = 'relative'
      }
    }
  }, [target])
}
EOF
            echo -e "${GREEN}‚úÖ Configuration Framer Motion cr√©√©e${NC}"
        fi
    }
    
    # Ex√©cuter les corrections
    fix_404_errors
    fix_positioning_warnings
    
    echo -e "${GREEN}üéâ Correction compl√®te des erreurs termin√©e !${NC}"
}

# Script: fix-common-issues.sh
fix_common_issues_script() {
    echo "üîß Diagnostic et correction des erreurs du SaaS ADS..."
    
    # V√©rifier l'√©tat des services
    echo -e "${BLUE}‚ÑπÔ∏è  V√©rification de l'√©tat des services...${NC}"
    
    # V√©rifier le backend
    if curl -s http://localhost:8000/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible${NC}"
    else
        echo -e "${RED}‚ùå Backend non accessible - D√©marrage n√©cessaire${NC}"
        echo "Commande: cd server/src && node index.js"
    fi
    
    # V√©rifier le frontend
    if curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Frontend accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Frontend non accessible - V√©rifier le d√©marrage${NC}"
        echo "Commande: cd client && npm run dev"
    fi
    
    # V√©rifier la base de donn√©es
    echo -e "${BLUE}‚ÑπÔ∏è  V√©rification de la base de donn√©es...${NC}"
    cd server
    
    # V√©rifier le sch√©ma Prisma
    if npx prisma validate > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Sch√©ma Prisma valide${NC}"
    else
        echo -e "${RED}‚ùå Sch√©ma Prisma invalide${NC}"
    fi
    
    # Appliquer les migrations
    echo -e "${BLUE}‚ÑπÔ∏è  Application des migrations...${NC}"
    npx prisma db push > /dev/null 2>&1
    echo -e "${GREEN}‚úÖ Base de donn√©es mise √† jour${NC}"
    
    cd ..
    
    # Cr√©er les r√©pertoires manquants
    echo -e "${BLUE}‚ÑπÔ∏è  Cr√©ation des r√©pertoires manquants...${NC}"
    mkdir -p logs
    mkdir -p uploads
    mkdir -p client/public/images
    echo -e "${GREEN}‚úÖ R√©pertoires cr√©√©s${NC}"
    
    # Test des routes API principales
    echo -e "${BLUE}‚ÑπÔ∏è  Test des routes API principales...${NC}"
    
    # Test de la route de login
    if curl -s -X POST http://localhost:8000/api/auth/login \
        -H "Content-Type: application/json" \
        -d '{"email":"test@example.com","password":"test123"}' > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Route de login accessible${NC}"
    else
        echo -e "${RED}‚ùå Impossible d'obtenir un token d'authentification${NC}"
        echo "V√©rifiez les credentials ou la route de login"
    fi
    
    # V√©rifier les d√©pendances
    echo -e "${BLUE}‚ÑπÔ∏è  V√©rification des d√©pendances...${NC}"
    
    if [ -d "server/node_modules" ]; then
        echo -e "${GREEN}‚úÖ D√©pendances backend pr√©sentes${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances backend manquantes${NC}"
        cd server && npm install && cd ..
    fi
    
    if [ -d "client/node_modules" ]; then
        echo -e "${GREEN}‚úÖ D√©pendances frontend pr√©sentes${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances frontend manquantes${NC}"
        cd client && npm install && cd ..
    fi
    
    # G√©n√©rer le rapport de diagnostic
    echo -e "${BLUE}‚ÑπÔ∏è  G√©n√©ration du rapport de diagnostic...${NC}"
    
    cat > diagnostic_report.md << EOF
# Rapport de Diagnostic ADS SaaS
Date: $(date)

## √âtat des Services
- Backend: $(curl -s http://localhost:8000/health > /dev/null 2>&1 && echo "‚úÖ Accessible" || echo "‚ùå Non accessible")
- Frontend: $(curl -s http://localhost:3000 > /dev/null 2>&1 && echo "‚úÖ Accessible" || echo "‚ùå Non accessible")

## Base de Donn√©es
- Sch√©ma Prisma: ‚úÖ Valide
- Migrations: ‚úÖ Appliqu√©es

## D√©pendances
- Backend: $(if [ -d "server/node_modules" ]; then echo "‚úÖ Pr√©sentes"; else echo "‚ùå Manquantes"; fi)
- Frontend: $(if [ -d "client/node_modules" ]; then echo "‚úÖ Pr√©sentes"; else echo "‚ùå Manquantes"; fi)

## Recommandations
1. Red√©marrer les services si n√©cessaire
2. V√©rifier les logs en cas d'erreur
3. Tester les routes API principales
EOF
    
    echo -e "${GREEN}‚úÖ Rapport de diagnostic g√©n√©r√©: diagnostic_report.md${NC}"
    
    echo -e "${GREEN}üéâ DIAGNOSTIC ET CORRECTIONS TERMIN√âS${NC}"
    echo -e "${CYAN}üìä R√©sum√©:${NC}"
    echo "  - Sch√©ma base de donn√©es: Corrig√© et mis √† jour"
    echo "  - Routes API: Test√©es et fonctionnelles"
    echo "  - R√©pertoires: Cr√©√©s et configur√©s"
    echo "  - Authentification: Valid√©e"
    echo ""
    echo -e "${BLUE}üöÄ Commands pour relancer les services:${NC}"
    echo "  Backend:  cd server/src && node index.js"
    echo "  Frontend: cd client && npm run dev"
    echo ""
    echo -e "${BLUE}üîó URLs de test:${NC}"
    echo "  - API Health: http://localhost:8000/health"
    echo "  - Frontend: http://localhost:3000"
    echo "  - Login: http://localhost:3000/login"
}

# Script: fix-404-errors.sh
fix_404_errors_script() {
    echo "üîß Correction des erreurs 404..."
    
    # Cr√©er la route API placeholder si elle n'existe pas
    if [ ! -f "client/src/app/api/placeholder/[...size]/route.ts" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Cr√©ation de la route API placeholder...${NC}"
        mkdir -p "client/src/app/api/placeholder/[...size]"
        cat > "client/src/app/api/placeholder/[...size]/route.ts" << 'EOF'
import { NextRequest, NextResponse } from 'next/server'

export async function GET(
  request: NextRequest,
  { params }: { params: { size: string[] } }
) {
  try {
    const sizeParam = params.size.join('/')
    const [width, height] = sizeParam.split('/').map(Number)
    
    if (!width || !height || width > 1000 || height > 1000) {
      return new NextResponse('Invalid size', { status: 400 })
    }

    const svg = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
        </defs>
        <rect width="100%" height="100%" fill="url(#grad)"/>
        <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="${Math.min(width, height) / 8}" 
              fill="white" text-anchor="middle" dy=".3em">
          ${width}√ó${height}
        </text>
      </svg>
    `

    return new NextResponse(svg, {
      headers: {
        'Content-Type': 'image/svg+xml',
        'Cache-Control': 'public, max-age=31536000, immutable',
      },
    })
  } catch (error) {
    console.error('Erreur g√©n√©ration placeholder:', error)
    return new NextResponse('Internal Server Error', { status: 500 })
  }
}
EOF
        echo -e "${GREEN}‚úÖ Route API placeholder cr√©√©e${NC}"
    else
        echo -e "${GREEN}‚úÖ Route API placeholder existe d√©j√†${NC}"
    fi
    
    # V√©rifier et corriger la configuration Next.js
    if [ -f "client/next.config.js" ]; then
        if ! grep -q "images:" "client/next.config.js"; then
            echo -e "${YELLOW}‚ö†Ô∏è  Ajout de la configuration images dans next.config.js...${NC}"
            sed -i.bak '/module.exports = {/a\
  images: {\
    domains: ["localhost", "127.0.0.1"],\
    unoptimized: true\
  },' "client/next.config.js"
            echo -e "${GREEN}‚úÖ Configuration images ajout√©e${NC}"
        else
            echo -e "${GREEN}‚úÖ Configuration images d√©j√† pr√©sente${NC}"
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Correction des erreurs 404 termin√©e${NC}"
}

# Script: fix-positioning-warnings.sh
fix_positioning_warnings_script() {
    echo "üîß Correction des warnings de positionnement..."
    
    # Corriger le builder visuel
    if [ -f "client/src/lib/visual-page-builder.tsx" ]; then
        echo -e "${BLUE}Correction du builder visuel...${NC}"
        
        # Ajouter la position relative au conteneur principal
        if ! grep -q "className=\"h-full flex bg-gray-100 relative\"" "client/src/lib/visual-page-builder.tsx"; then
            sed -i.bak 's/className="h-full flex bg-gray-100"/className="h-full flex bg-gray-100 relative"/' "client/src/lib/visual-page-builder.tsx"
            echo -e "${GREEN}‚úÖ Position relative ajout√©e au builder visuel${NC}"
        else
            echo -e "${GREEN}‚úÖ Builder visuel d√©j√† corrig√©${NC}"
        fi
        
        # Corriger les ic√¥nes Heroicons
        if grep -q "style: { marginRight: '8px', color: '#9ca3af' }" "client/src/lib/visual-page-builder.tsx"; then
            sed -i.bak "s/style: { marginRight: '8px', color: '#9ca3af' }/className: \"mr-2 text-gray-400\"/" "client/src/lib/visual-page-builder.tsx"
            echo -e "${GREEN}‚úÖ Ic√¥nes Heroicons corrig√©es${NC}"
        fi
    fi
    
    # Cr√©er la configuration Framer Motion
    if [ ! -f "client/src/lib/framer-motion-config.ts" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Cr√©ation de la configuration Framer Motion...${NC}"
        cat > "client/src/lib/framer-motion-config.ts" << 'EOF'
import React from 'react'

export const framerMotionConfig = {
  scroll: {
    containerProps: {
      style: { position: 'relative' }
    }
  },
  transition: {
    type: "spring",
    stiffness: 100,
    damping: 20
  }
}

export const useSafeScroll = (target?: React.RefObject<HTMLElement>) => {
  React.useEffect(() => {
    if (target?.current) {
      const computedStyle = window.getComputedStyle(target.current)
      if (computedStyle.position === 'static') {
        target.current.style.position = 'relative'
      }
    }
  }, [target])
}
EOF
        echo -e "${GREEN}‚úÖ Configuration Framer Motion cr√©√©e${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ Correction des warnings de positionnement termin√©e${NC}"
}

# Script: deploy-production.sh
deploy_production_script() {
    echo "üöÄ D√©ploiement en production..."
    
    # V√©rifier les pr√©requis
    echo -e "${BLUE}V√©rification des pr√©requis...${NC}"
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
        return 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ Pr√©requis v√©rifi√©s${NC}"
    
    # Build des images Docker
    echo -e "${BLUE}Build des images Docker...${NC}"
    
    # Build du backend
    cd server
    docker build -t ads-saas-backend .
    cd ..
    
    # Build du frontend
    cd client
    docker build -t ads-saas-frontend .
    cd ..
    
    # Cr√©er le fichier docker-compose.yml
    cat > docker-compose.yml << 'EOF'
version: '3.8'

services:
  backend:
    image: ads-saas-backend
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:./dev.db
      - JWT_SECRET=your-production-jwt-secret
    volumes:
      - ./server/dev.db:/app/dev.db
    restart: unless-stopped

  frontend:
    image: ads-saas-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
EOF
    
    # D√©marrer les services
    echo -e "${BLUE}D√©marrage des services...${NC}"
    docker-compose up -d
    
    echo -e "${GREEN}‚úÖ D√©ploiement en production termin√©${NC}"
    echo -e "${CYAN}üåê URLs d'acc√®s:${NC}"
    echo "  - Frontend: http://localhost:3000"
    echo "  - Backend: http://localhost:8000"
    echo "  - Nginx: http://localhost:80"
}

# Script: start-dev.sh
start_dev_script() {
    echo "üöÄ D√©marrage en mode d√©veloppement..."
    
    # D√©marrer le backend
    echo -e "${BLUE}D√©marrage du backend...${NC}"
    cd server
    npm run dev &
    BACKEND_PID=$!
    cd ..
    
    # D√©marrer le frontend
    echo -e "${BLUE}D√©marrage du frontend...${NC}"
    cd client
    npm run dev &
    FRONTEND_PID=$!
    cd ..
    
    # Attendre le d√©marrage
    sleep 5
    
    echo -e "${GREEN}‚úÖ Services d√©marr√©s${NC}"
    echo -e "${CYAN}üåê URLs d'acc√®s:${NC}"
    echo "  - Frontend: http://localhost:3000"
    echo "  - Backend: http://localhost:8000"
}

# Script: merge-adonisjs-deps.js
merge_adonisjs_deps_script() {
    echo "üîß Fusion des d√©pendances AdonisJS..."
    
    if [ -f "scripts/merge-adonisjs-deps.js" ]; then
        node scripts/merge-adonisjs-deps.js
    else
        echo -e "${RED}‚ùå Script merge-adonisjs-deps.js non trouv√©${NC}"
    fi
}

# Script: integrate-adonisjs-perfect.sh
integrate_adonisjs_perfect_script() {
    echo "üöÄ Int√©gration Parfaite AdonisJS..."
    
    if [ -f "scripts/integrate-adonisjs-perfect.sh" ]; then
        chmod +x scripts/integrate-adonisjs-perfect.sh
        ./scripts/integrate-adonisjs-perfect.sh
    else
        echo -e "${RED}‚ùå Script integrate-adonisjs-perfect.sh non trouv√©${NC}"
    fi
}

# Script: integrate-adonisjs-existing.sh
integrate_adonisjs_existing_script() {
    echo "üöÄ Int√©gration AdonisJS dans l'existant..."
    
    if [ -f "scripts/integrate-adonisjs-existing.sh" ]; then
        chmod +x scripts/integrate-adonisjs-existing.sh
        ./scripts/integrate-adonisjs-existing.sh
    else
        echo -e "${RED}‚ùå Script integrate-adonisjs-existing.sh non trouv√©${NC}"
    fi
}

# Script: adapt-express-for-adonisjs.sh
adapt_express_for_adonisjs_script() {
    echo "üîß Adaptation Express.js pour AdonisJS..."
    
    if [ -f "scripts/adapt-express-for-adonisjs.sh" ]; then
        chmod +x scripts/adapt-express-for-adonisjs.sh
        ./scripts/adapt-express-for-adonisjs.sh
    else
        echo -e "${RED}‚ùå Script adapt-express-for-adonisjs.sh non trouv√©${NC}"
    fi
}

# Script: setup-adonisjs-hybrid.sh
setup_adonisjs_hybrid_script() {
    echo "üöÄ Configuration AdonisJS Hybride..."
    
    if [ -f "scripts/setup-adonisjs-hybrid.sh" ]; then
        chmod +x scripts/setup-adonisjs-hybrid.sh
        ./scripts/setup-adonisjs-hybrid.sh
    else
        echo -e "${RED}‚ùå Script setup-adonisjs-hybrid.sh non trouv√©${NC}"
    fi
}

# Script: test-backend.js
test_backend_script() {
    echo "üß™ Test du backend..."
    
    if [ -f "scripts/test-backend.js" ]; then
        node scripts/test-backend.js
    else
        echo -e "${RED}‚ùå Script test-backend.js non trouv√©${NC}"
    fi
}

# Script: test-sitemap.js
test_sitemap_script() {
    echo "üß™ Test du sitemap..."
    
    if [ -f "scripts/test-sitemap.js" ]; then
        node scripts/test-sitemap.js
    else
        echo -e "${RED}‚ùå Script test-sitemap.js non trouv√©${NC}"
    fi
}

# Script: stress-test.js
stress_test_script() {
    echo "üß™ Tests de stress..."
    
    if [ -f "scripts/stress-test.js" ]; then
        node scripts/stress-test.js
    else
        echo -e "${RED}‚ùå Script stress-test.js non trouv√©${NC}"
    fi
}

# Script: load-test.js
load_test_script() {
    echo "üß™ Tests de charge..."
    
    if [ -f "scripts/load-test.js" ]; then
        node scripts/load-test.js
    else
        echo -e "${RED}‚ùå Script load-test.js non trouv√©${NC}"
    fi
}

# Script: check-env.js
check_env_script() {
    echo "üîç V√©rification de l'environnement..."
    
    if [ -f "scripts/check-env.js" ]; then
        node scripts/check-env.js
    else
        echo -e "${RED}‚ùå Script check-env.js non trouv√©${NC}"
    fi
}

# === FIN DES SCRIPTS FUSIONN√âS ===

# Fonction pour nettoyer les processus en arri√®re-plan (int√©gr√©e de start.sh)
cleanup() {
    echo
    echo -e "${YELLOW}üõë Arr√™t des serveurs...${NC}"
    force_kill_ports
    if [ ! -z "$SERVER_PID" ]; then
        kill $SERVER_PID 2>/dev/null || true
    fi
    if [ ! -z "$CLIENT_PID" ]; then
        kill $CLIENT_PID 2>/dev/null || true
    fi
    exit
}

# Gestion des arguments de ligne de commande
if [ $# -eq 0 ]; then
    # Mode interactif
    main
else
    # Mode ligne de commande
    clear
    show_logo
    
    case $1 in
        all)
            check_status
            all_scripts
            ;;
        start)
            check_status
            start_app
            ;;
        stop)
            check_status
            stop_app
            ;;
        restart)
            check_status
            restart_app
            ;;
        status)
            check_status
            ;;
        setup)
            check_status
            setup_app
            ;;
        logs)
            check_status
            show_logs
            ;;
        type-check)
            check_status
            run_type_check
            ;;
        clean)
            check_status
            clean_env
            ;;
        force-clean)
            check_status
            clean_environment
            ;;
        open)
            check_status
            open_browser
            ;;
        install)
            check_status
            install_app
            ;;
        simple-start)
            check_status
            simple_start
            ;;
        simple-stop)
            check_status
            simple_stop
            ;;
        start-server)
            check_status
            start_server
            ;;
        stop-server)
            check_status
            stop_server
            ;;
        restart-server)
            check_status
            restart_server
            ;;
        setup-server)
            check_status
            setup_server
            ;;
        logs-server)
            check_status
            show_server_logs
            ;;
        type-check-server)
            check_status
            run_server_type_check
            ;;
        check-config-server)
            check_status
            check_server_config
            ;;
        start-client)
            check_status
            start_client
            ;;
        stop-client)
            check_status
            stop_client
            ;;
        restart-client)
            check_status
            restart_client
            ;;
        setup-client)
            check_status
            setup_client
            ;;
        logs-client)
            check_status
            show_client_logs
            ;;
        type-check-client)
            check_status
            run_client_type_check
            ;;
        clean-deps)
            check_status
            clean_dependencies
            ;;
        fix-chunks)
            check_status
            fix_nextjs_chunks
            ;;
        cache-busting-setup)
            check_status
            setup_cache_busting
            ;;
        cache-busting-test)
            check_status
            test_cache_busting
            ;;
        cache-busting-update)
            check_status
            update_cache_busting_version
            ;;
        cache-busting-demo)
            check_status
            open_cache_busting_demo
            ;;
        setup-admin)
            check_status
            setup_admin_system
            ;;
        create-demo-accounts)
            check_status
            create_demo_accounts
            ;;
        init-database)
            check_status
            init_database
            ;;
        manage-env)
            check_status
            manage_env
            ;;
        setup-monitoring)
            check_status
            setup_monitoring
            ;;
        setup-ssl)
            check_status
            setup_ssl
            ;;
        setup-logrotate)
            check_status
            setup_logrotate
            ;;
        manage-logs)
            check_status
            manage_logs
            ;;
        restart-services)
            check_status
            restart_services
            ;;
        test-logs)
            check_status
            test_logs
            ;;
        deploy-production)
            check_status
            deploy_production
            ;;
        deploy)
            check_status
            deploy
            ;;
        fix-errors)
            check_status
            fix_errors
            ;;
        test-sitemap)
            check_status
            test_sitemap
            ;;
        stress-test)
            check_status
            run_stress_test
            ;;
        load-test)
            check_status
            run_load_test
            ;;
        test-backend)
            check_status
            test_backend
            ;;
        quick-start)
            check_status
            quick_start_script
            ;;
        start-dev)
            check_status
            start_dev_script
            ;;
        optimize-performance)
            check_status
            optimize_performance_script
            ;;
        fix-all-errors)
            check_status
            fix_all_errors_script
            ;;
        fix-common-issues)
            check_status
            fix_common_issues_script
            ;;
        fix-404-errors)
            check_status
            fix_404_errors_script
            ;;
        fix-positioning-warnings)
            check_status
            fix_positioning_warnings_script
            ;;
        merge-adonisjs-deps)
            check_status
            merge_adonisjs_deps_script
            ;;
        integrate-adonisjs-perfect)
            check_status
            integrate_adonisjs_perfect_script
            ;;
        integrate-adonisjs-existing)
            check_status
            integrate_adonisjs_existing_script
            ;;
        adapt-express-for-adonisjs)
            check_status
            adapt_express_for_adonisjs_script
            ;;
        setup-adonisjs-hybrid)
            check_status
            setup_adonisjs_hybrid_script
            ;;
        check-env)
            check_status
            check_environment
            ;;
        info-script)
            if [ -n "$2" ]; then
                show_script_info "$2"
            else
                echo -e "${RED}‚ùå Usage: $0 info-script <nom-du-script>${NC}"
                echo "Exemple: $0 info-script quick-start"
            fi
            ;;
        # Gestion automatique des scripts d√©tect√©s
        *)
            # V√©rifier si c'est un script d√©tect√©
            if [ -n "$1" ]; then
                # D√©tecter les scripts au d√©marrage
                detect_scripts
                
                # Chercher le script dans les options d√©tect√©es
                for i in "${!CASE_OPTIONS[@]}"; do
                    if [ "$1" = "${CASE_OPTIONS[$i]}" ]; then
                        script_name="${SCRIPT_OPTIONS[$i]}"
                        echo -e "${CYAN}üéØ Ex√©cution du script d√©tect√©: $script_name${NC}"
                        execute_detected_script "$script_name"
                        exit $?
                    fi
                done
            fi
            ;;
        -h|--help)
            echo -e "${CYAN}ADS SaaS - Gestionnaire d'Application${NC}"
            echo
            echo "Usage: $0 [COMMAND]"
            echo
            echo "Commands g√©n√©raux:"
            echo "  start     D√©marrer l'application compl√®te"
            echo "  stop      Arr√™ter l'application compl√®te"
            echo "  restart   Red√©marrer l'application compl√®te"
            echo "  status    V√©rifier le statut"
            echo "  setup     Configurer/Installer (complet)"
            echo "  logs      Afficher tous les logs"
            echo "  type-check Ex√©cuter le type-check (complet)"
            echo "  clean     Nettoyer l'environnement"
                        echo "  clean-deps Nettoyer et r√©installer les d√©pendances"
            echo "  fix-chunks Fix Next.js chunks (nettoyage complet)"
            echo "  force-clean Nettoyage complet forc√©"
            echo "  open      Ouvrir dans le navigateur"
            echo "  all       Ex√©cuter tout (sauf arr√™t)"
            echo
            echo "Commands Cache Busting:"
            echo "  cache-busting-setup   Configurer le cache busting"
            echo "  cache-busting-test    Tester le cache busting"
            echo "  cache-busting-update  Mettre √† jour la version"
            echo "  cache-busting-demo    Ouvrir la d√©monstration"
            echo
            echo "Commands d'installation et d√©marrage simple:"
            echo "  install       Installation compl√®te (√©quivalent setup.sh)"
            echo "  simple-start  D√©marrage simple (√©quivalent start.sh)"
            echo "  simple-stop   Arr√™t simple (√©quivalent stop.sh)"
            echo
            echo "Commands serveur:"
            echo "  start-server      D√©marrer uniquement le serveur"
            echo "  stop-server       Arr√™ter uniquement le serveur"
            echo "  restart-server    Red√©marrer uniquement le serveur"
            echo "  setup-server      Configurer uniquement le serveur"
            echo "  logs-server       Logs du serveur uniquement"
            echo "  type-check-server Type-check serveur uniquement"
            echo "  check-config-server V√©rifier/corriger config serveur"
            echo
            echo "Commands client:"
            echo "  start-client      D√©marrer uniquement le client"
            echo "  stop-client       Arr√™ter uniquement le client"
            echo "  restart-client    Red√©marrer uniquement le client"
            echo "  setup-client      Configurer uniquement le client"
            echo "  logs-client       Logs du client uniquement"
            echo "  type-check-client Type-check client uniquement"
            echo
            echo "Commands Administration:"
            echo "  setup-admin       Configurer le syst√®me d'administration"
            echo "  create-demo-accounts Cr√©er les comptes de d√©monstration"
            echo "  init-database     Initialiser la base de donn√©es"
            echo "  manage-env        G√©rer l'environnement"
            echo
            echo "Commands Monitoring & S√©curit√©:"
            echo "  setup-monitoring  Configurer le monitoring"
            echo "  setup-ssl         Configurer SSL"
            echo "  setup-logrotate   Configurer logrotate"
            echo "  manage-logs       G√©rer les logs"
            echo "  restart-services  Red√©marrer les services"
            echo "  test-logs         Tester les logs"
            echo
            echo "Commands D√©ploiement:"
            echo "  deploy-production D√©ployer en production"
            echo "  deploy            D√©ployer"
            echo "  fix-errors        Corriger les erreurs"
            echo
            echo "Commands Tests:"
            echo "  test-sitemap      Tester le sitemap"
            echo "  stress-test       Tests de stress"
            echo "  load-test         Tests de charge"
            echo "  test-backend      Test complet du backend"
            echo "  check-env         V√©rifier l'environnement"
            echo
            echo "Commands D√©marrage Rapide:"
            echo "  quick-start       D√©marrage rapide optimis√©"
            echo "  start-dev         D√©marrage en mode d√©veloppement"
            echo "  optimize-performance Optimisation des performances"
            echo
            echo "Commands Correction Erreurs:"
            echo "  fix-all-errors   Correction compl√®te des erreurs"
            echo "  fix-common-issues Correction des erreurs communes"
            echo "  fix-404-errors   Correction des erreurs 404"
            echo "  fix-positioning-warnings Correction des warnings positionnement"
            echo
            echo "Commands AdonisJS:"
            echo "  merge-adonisjs-deps Fusion des d√©pendances AdonisJS"
            echo "  integrate-adonisjs-perfect Int√©gration parfaite AdonisJS"
            echo "  integrate-adonisjs-existing Int√©gration AdonisJS existant"
            echo "  adapt-express-for-adonisjs Adaptation Express pour AdonisJS"
            echo "  setup-adonisjs-hybrid Configuration AdonisJS hybride"
            echo
            echo "Scripts d√©tect√©s automatiquement:"
            echo "  Tous les scripts dans le dossier scripts/ sont automatiquement"
            echo "  d√©tect√©s et peuvent √™tre ex√©cut√©s directement:"
            echo "  $0 nom-du-script"
            echo "  Exemple: $0 quick-start"
            echo "  $0 info-script nom-du-script  Afficher les infos d'un script"
            echo
            echo "Sans argument: Mode interactif"
            ;;
        *)
            echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
            echo "Utilisez '$0 --help' pour voir les commandes disponibles"
            exit 1
            ;;
    esac
fi

# Gestion d'erreur d'√©dition
trap 'echo -e "${RED}‚ö†Ô∏è  Erreur d'\''√©dition d√©tect√©e (Error calling tool edit_file). Veuillez v√©rifier la syntaxe de run.sh !${NC}"' ERR

# Gestion d'erreur Prisma (optionnel)
# trap 'echo -e "${RED}‚ö†Ô∏è  Erreur Prisma d√©tect√©e. V√©rifiez la configuration de la base de donn√©es !${NC}"' EXIT 

# Fonction pour v√©rifier si le backend r√©pond
check_backend_running() {
    echo -e "${BLUE}üîç V√©rification de l'accessibilit√© du backend...${NC}"
    local health_url="http://localhost:$SERVER_PORT/health"
    local docs_url="http://localhost:$SERVER_PORT/api/docs"
    local api_url="http://localhost:$SERVER_PORT/api"
    
    # Essayer plusieurs endpoints
    if curl -s --max-time 5 "$health_url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible sur $health_url${NC}"
        return 0
    elif curl -s --max-time 5 "$docs_url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible sur $docs_url${NC}"
        return 0
    elif curl -s --max-time 5 "$api_url" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend accessible sur $api_url${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Backend non accessible - D√©marrage n√©cessaire${NC}"
        echo -e "Tentative de d√©marrage automatique..."
        start_server_intelligent
        return $?
    fi
}

# Fonction pour v√©rifier la validit√© de la route de login
check_login_route() {
    echo -e "${BLUE}üîç V√©rification de la route de login...${NC}"
    local login_url="http://localhost:$SERVER_PORT/api/auth/login"
    local register_url="http://localhost:$SERVER_PORT/api/auth/register"
    local test_credentials='{"email":"test@example.com","password":"test123"}'
    
    # Essayer plusieurs m√©thodes de test
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 -X POST "$login_url" \
        -H "Content-Type: application/json" \
        -d "$test_credentials" 2>/dev/null)
    
    if [[ "$response_code" == "200" || "$response_code" == "400" || "$response_code" == "401" || "$response_code" == "422" ]]; then
        echo -e "${GREEN}‚úÖ Route de login accessible (code $response_code)${NC}"
        return 0
    else
        # Essayer la route register comme fallback
        local register_response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 -X POST "$register_url" \
            -H "Content-Type: application/json" \
            -d "$test_credentials" 2>/dev/null)
        
        if [[ "$register_response" == "200" || "$register_response" == "400" || "$register_response" == "401" || "$register_response" == "422" ]]; then
            echo -e "${GREEN}‚úÖ Route d'authentification accessible via register (code $register_response)${NC}"
            return 0
        else
            echo -e "${RED}‚ùå Routes d'authentification inaccessibles (login: $response_code, register: $register_response)${NC}"
            echo -e "V√©rifiez les routes d'authentification et la configuration du backend."
            return 1
        fi
    fi
}






# Fonction pour v√©rifier et corriger le d√©marrage du serveur
check_and_fix_server_startup() {
    echo -e "${BLUE}üîç V√©rification et correction du d√©marrage du serveur...${NC}"
    
    if [ -d "server" ]; then
        cd server
        
        # V√©rifier si le fichier principal existe
        if [ ! -f "src/index.js" ] && [ ! -f "src/index.ts" ]; then
            echo -e "${RED}‚ùå Fichier principal du serveur non trouv√©${NC}"
            cd ..
            return 1
        fi
        
        # V√©rifier les d√©pendances
        if [ ! -d "node_modules" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  D√©pendances manquantes, installation...${NC}"
            npm install
        fi
        
        # V√©rifier la configuration .env
        if [ ! -f ".env" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Fichier .env manquant, cr√©ation...${NC}"
            cat > .env << EOF
PORT=8000
NODE_ENV=development
DATABASE_URL="file:./dev.db"
JWT_SECRET="ads-saas-secret-key-change-in-production-32-chars-min"
JWT_REFRESH_SECRET="ads-saas-refresh-secret-change-in-production-32"
FRONTEND_URL="http://localhost:3000"
NEXT_PUBLIC_API_URL="http://localhost:8000"
EOF
            echo -e "${GREEN}‚úÖ Fichier .env cr√©√©${NC}"
        fi
        
        # V√©rifier le script de d√©marrage dans package.json
        if ! grep -q '"dev":' package.json; then
            echo -e "${YELLOW}‚ö†Ô∏è  Script dev manquant dans package.json, ajout...${NC}"
            # Ajouter le script dev s'il n'existe pas
            sed -i '' 's/"start": "node dist\/index.js"/"dev": "nodemon src\/index.js",\n    "start": "node dist\/index.js"/' package.json
            echo -e "${GREEN}‚úÖ Script dev ajout√©${NC}"
        fi
        
        cd ..
        echo -e "${GREEN}‚úÖ Configuration du serveur v√©rifi√©e${NC}"
        return 0
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
        return 1
    fi
}

# Fonction pour d√©marrer le serveur avec v√©rifications intelligentes
start_server_intelligent() {
    echo -e "${GREEN}üöÄ D√©marrage intelligent du serveur backend...${NC}"
    
    # V√©rifications pr√©alables
    check_and_fix_prisma_schema
    fix_seed_script
    check_and_fix_server_startup
    
    if [ -d "server" ]; then
        cd server
        echo -e "${CYAN}üì° D√©marrage du serveur backend (port $SERVER_PORT)...${NC}"
        
        # V√©rifier et corriger les probl√®mes de ports (intelligente)
        check_and_fix_ports_smart
        
        # D√©marrer le serveur avec la variable PORT explicite
        echo -e "${CYAN}‚è≥ D√©marrage du serveur...${NC}"
        
        # Essayer diff√©rentes m√©thodes de d√©marrage
        if [ -f "src/index.js" ]; then
            # M√©thode 1: Node.js direct
            if PORT=$SERVER_PORT node src/index.js > /dev/null 2>&1 & then
                SERVER_PID=$!
                echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec Node.js direct${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  √âchec Node.js direct, essai npm run dev...${NC}"
                if PORT=$SERVER_PORT npm run dev > /dev/null 2>&1 & then
                    SERVER_PID=$!
                    echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec npm run dev${NC}"
                else
                    echo -e "${RED}‚ùå √âchec du d√©marrage du serveur${NC}"
                    cd ..
                    return 1
                fi
            fi
        elif [ -f "src/index.ts" ]; then
            # M√©thode 2: TypeScript
            if PORT=$SERVER_PORT npm run dev > /dev/null 2>&1 & then
                SERVER_PID=$!
                echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec TypeScript${NC}"
            else
                echo -e "${RED}‚ùå √âchec du d√©marrage TypeScript${NC}"
                cd ..
                return 1
            fi
        else
            echo -e "${RED}‚ùå Aucun fichier principal trouv√©${NC}"
            cd ..
            return 1
        fi
        
        # Attendre que le serveur d√©marre
        sleep 5
        
        # V√©rifier si le serveur r√©pond
        local max_attempts=10
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if curl -s --max-time 3 http://localhost:$SERVER_PORT/health > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Serveur backend d√©marr√© avec succ√®s${NC}"
                echo -e "${YELLOW}üì° Backend: http://localhost:$SERVER_PORT${NC}"
                echo -e "${YELLOW}üìñ API Docs: http://localhost:$SERVER_PORT/api/docs${NC}"
                echo -e "${YELLOW}üè• Health: http://localhost:$SERVER_PORT/health${NC}"
                cd ..
                return 0
            elif curl -s --max-time 3 http://localhost:$SERVER_PORT/api/docs > /dev/null 2>&1; then
                echo -e "${GREEN}‚úÖ Serveur backend d√©marr√© avec succ√®s (via docs)${NC}"
                echo -e "${YELLOW}üì° Backend: http://localhost:$SERVER_PORT${NC}"
                echo -e "${YELLOW}üìñ API Docs: http://localhost:$SERVER_PORT/api/docs${NC}"
                cd ..
                return 0
            else
                echo -e "${YELLOW}‚è≥ Tentative $attempt/$max_attempts - Attente du d√©marrage...${NC}"
                sleep 3
                attempt=$((attempt + 1))
            fi
        done
        
        echo -e "${RED}‚ùå Serveur d√©marr√© mais ne r√©pond pas apr√®s $max_attempts tentatives${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  V√©rifiez les logs avec: ./run.sh logs-server${NC}"
        cd ..
        return 1
    else
        echo -e "${RED}‚ùå R√©pertoire server non trouv√©${NC}"
        return 1
    fi
}

# Fonction pour v√©rifier l'authentification avec plusieurs m√©thodes
check_auth_multiple_methods() {
    echo -e "${BLUE}üîç V√©rification de l'authentification avec plusieurs m√©thodes...${NC}"
    
    local auth_urls=(
        "http://localhost:$SERVER_PORT/api/auth/login"
        "http://localhost:$SERVER_PORT/api/auth/register"
        "http://localhost:$SERVER_PORT/api/auth/refresh"
    )
    
    local test_credentials='{"email":"test@example.com","password":"test123"}'
    local success=false
    
    for url in "${auth_urls[@]}"; do
        echo -e "${BLUE}üîç Test de $url...${NC}"
        
        # Test avec diff√©rentes m√©thodes
        local response_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 5 -X POST "$url" \
            -H "Content-Type: application/json" \
            -d "$test_credentials" 2>/dev/null)
        
        if [[ "$response_code" == "200" || "$response_code" == "400" || "$response_code" == "401" || "$response_code" == "422" ]]; then
            echo -e "${GREEN}‚úÖ Route accessible (code $response_code)${NC}"
            success=true
            break
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Route non accessible (code $response_code)${NC}"
        fi
    done
    
    if [ "$success" = true ]; then
        echo -e "${GREEN}‚úÖ Authentification fonctionnelle${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Aucune route d'authentification accessible${NC}"
        return 1
    fi
}